// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
#endif

namespace Test
{
    #region base classes
    public struct FieldMetadata
    {
        public string Name { get; set; }
        public string DefaultAlias { get; set; }
        public bool IsComplex { get; set; }
        public Type QueryBuilderType { get; set; }
    }
    
    public enum Formatting
    {
        None,
        Indented
    }
    
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    public class QueryBuilderParameterConverter<T> : JsonConverter
    {
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                default:
                    return (QueryBuilderParameter<T>)(T)serializer.Deserialize(reader, typeof(T));
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            if (value == null)
                writer.WriteNull();
            else
                serializer.Serialize(writer, ((QueryBuilderParameter<T>)value).Value, typeof(T));
        }
    
        public override bool CanConvert(Type objectType) => objectType.IsSubclassOf(typeof(QueryBuilderParameter));
    }
    #endif
    
    internal static class GraphQlQueryHelper
    {
        private static readonly Regex RegexWhiteSpace = new Regex(@"\s", RegexOptions.Compiled);
        private static readonly Regex RegexGraphQlIdentifier = new Regex(@"^[_A-Za-z][_0-9A-Za-z]*$", RegexOptions.Compiled);
    
        public static string GetIndentation(int level, byte indentationSize)
        {
            return new String(' ', level * indentationSize);
        }
    
        public static string BuildArgumentValue(object value, string formatMask, Formatting formatting, int level, byte indentationSize)
        {
            if (value is null)
                return "null";
    
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
            if (value is JValue jValue)
            {
                switch (jValue.Type)
                {
                    case JTokenType.Null: return "null";
                    case JTokenType.Integer:
                    case JTokenType.Float:
                    case JTokenType.Boolean:
                        return BuildArgumentValue(jValue.Value, null, formatting, level, indentationSize);
                    default:
                        return "\"" + jValue.Value + "\"";
                }
            }
    
            if (value is JProperty jProperty)
            {
                if (RegexWhiteSpace.IsMatch(jProperty.Name))
                    throw new ArgumentException($"JSON object keys used as GraphQL arguments must not contain whitespace; key: {jProperty.Name}");
    
                return $"{jProperty.Name}:{(formatting == Formatting.Indented ? " " : null)}{BuildArgumentValue(jProperty.Value, null, formatting, level, indentationSize)}";
            }
    
            if (value is JObject jObject)
                return BuildEnumerableArgument(jObject, null, formatting, level + 1, indentationSize, '{', '}');
    #endif
    
            var enumerable = value as IEnumerable;
            if (!String.IsNullOrEmpty(formatMask) && enumerable == null)
                return
                    value is IFormattable formattable
                        ? "\"" + formattable.ToString(formatMask, CultureInfo.InvariantCulture) + "\""
                        : throw new ArgumentException($"Value must implement {nameof(IFormattable)} interface to use a format mask. ", nameof(value));
    
            if (value is Enum @enum)
                return ConvertEnumToString(@enum);
    
            if (value is bool @bool)
                return @bool ? "true" : "false";
    
            if (value is DateTime dateTime)
                return "\"" + dateTime.ToString("O") + "\"";
    
            if (value is DateTimeOffset dateTimeOffset)
                return "\"" + dateTimeOffset.ToString("O") + "\"";
    
            if (value is IGraphQlInputObject inputObject)
                return BuildInputObject(inputObject, formatting, level + 2, indentationSize);
    
            if (value is String || value is Guid)
                return "\"" + value + "\"";
    
            if (enumerable != null)
                return BuildEnumerableArgument(enumerable, formatMask, formatting, level, indentationSize, '[', ']');
    
            if (value is short || value is ushort || value is byte || value is int || value is uint || value is long || value is ulong || value is float || value is double || value is decimal)
                return Convert.ToString(value, CultureInfo.InvariantCulture);
    
            var argumentValue = Convert.ToString(value, CultureInfo.InvariantCulture);
            return "\"" + argumentValue + "\"";
        }
    
        private static string BuildEnumerableArgument(IEnumerable enumerable, string formatMask, Formatting formatting, int level, byte indentationSize, char openingSymbol, char closingSymbol)
        {
            var builder = new StringBuilder();
            builder.Append(openingSymbol);
            var delimiter = String.Empty;
            foreach (var item in enumerable)
            {
                builder.Append(delimiter);
    
                if (formatting == Formatting.Indented)
                {
                    builder.AppendLine();
                    builder.Append(GetIndentation(level + 1, indentationSize));
                }
    
                builder.Append(BuildArgumentValue(item, formatMask, formatting, level, indentationSize));
                delimiter = ",";
            }
    
            builder.Append(closingSymbol);
            return builder.ToString();
        }
    
        public static string BuildInputObject(IGraphQlInputObject inputObject, Formatting formatting, int level, byte indentationSize)
        {
            var builder = new StringBuilder();
            builder.Append("{");
    
            var isIndentedFormatting = formatting == Formatting.Indented;
            string valueSeparator;
            if (isIndentedFormatting)
            {
                builder.AppendLine();
                valueSeparator = ": ";
            }
            else
                valueSeparator = ":";
    
            var separator = String.Empty;
            foreach (var propertyValue in inputObject.GetPropertyValues())
            {
                var queryBuilderParameter = propertyValue.Value as QueryBuilderParameter;
                var value =
                    queryBuilderParameter?.Name != null
                        ? "$" + queryBuilderParameter.Name
                        : BuildArgumentValue(queryBuilderParameter?.Value ?? propertyValue.Value, propertyValue.FormatMask, formatting, level, indentationSize);
    
                builder.Append(isIndentedFormatting ? GetIndentation(level, indentationSize) : separator);
                builder.Append(propertyValue.Name);
                builder.Append(valueSeparator);
                builder.Append(value);
    
                separator = ",";
    
                if (isIndentedFormatting)
                    builder.AppendLine();
            }
    
            if (isIndentedFormatting)
                builder.Append(GetIndentation(level - 1, indentationSize));
    
            builder.Append("}");
    
            return builder.ToString();
        }
    
        public static string BuildDirective(GraphQlDirective directive, Formatting formatting, int level, byte indentationSize)
        {
            if (directive == null)
                return String.Empty;
    
            var isIndentedFormatting = formatting == Formatting.Indented;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
            builder.Append(indentationSpace);
            builder.Append("@");
            builder.Append(directive.Name);
            builder.Append("(");
    
            string separator = null;
            foreach (var kvp in directive.Arguments)
            {
                var argumentName = kvp.Key;
                var argument = kvp.Value;
    
                builder.Append(separator);
                builder.Append(argumentName);
                builder.Append(":");
                builder.Append(indentationSpace);
    
                if (argument.Name == null)
                    builder.Append(BuildArgumentValue(argument.Value, null, formatting, level, indentationSize));
                else
                {
                    builder.Append("$");
                    builder.Append(argument.Name);
                }
    
                separator = isIndentedFormatting ? ", " : ",";
            }
    
            builder.Append(")");
            return builder.ToString();
        }
    
        public static void ValidateGraphQlIdentifier(string name, string identifier)
        {
            if (identifier != null && !RegexGraphQlIdentifier.IsMatch(identifier))
                throw new ArgumentException("value must match [_A-Za-z][_0-9A-Za-z]*", name);
        }
    
        private static string ConvertEnumToString(Enum @enum)
        {
            var enumMember = @enum.GetType().GetTypeInfo().GetField(@enum.ToString());
                if (enumMember == null)
                    throw new InvalidOperationException("enum member resolution failed");
    
            var enumMemberAttribute = (EnumMemberAttribute)enumMember.GetCustomAttribute(typeof(EnumMemberAttribute));
    
            return enumMemberAttribute == null
                ? @enum.ToString()
                : enumMemberAttribute.Value;
        }
    }
    
    internal struct InputPropertyInfo
    {
        public string Name { get; set; }
        public object Value { get; set; }
        public string FormatMask { get; set; }
    }
    
    internal interface IGraphQlInputObject
    {
        IEnumerable<InputPropertyInfo> GetPropertyValues();
    }
    
    public interface IGraphQlQueryBuilder
    {
        void Clear();
        void IncludeAllFields();
        string Build(Formatting formatting = Formatting.None, byte indentationSize = 2);
    }
    
    public struct QueryBuilderArgumentInfo
    {
        public string ArgumentName { get; set; }
        public QueryBuilderParameter ArgumentValue { get; set; }
        public string FormatMask { get; set; }
    }
    
    public abstract class QueryBuilderParameter
    {
        private string _name;
    
        internal string GraphQlTypeName { get; }
        internal object Value { get; set; }
    
        public string Name
        {
            get => _name;
            set
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(Name), value);
                _name = value;
            }
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, object value)
        {
            Name = name?.Trim();
            GraphQlTypeName = graphQlTypeName?.Replace(" ", null).Replace("\t", null).Replace("\n", null).Replace("\r", null);
            Value = value;
        }
    
        protected QueryBuilderParameter(object value) => Value = value;
    }
    
    public class QueryBuilderParameter<T> : QueryBuilderParameter
    {
        public new T Value
        {
            get => (T)base.Value;
            set => base.Value = value;
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
        {
        }
    
        private QueryBuilderParameter(T value) : base(value)
        {
        }
    
        public static implicit operator QueryBuilderParameter<T>(T value) => new QueryBuilderParameter<T>(value);
    
        public static implicit operator T(QueryBuilderParameter<T> parameter) => parameter.Value;
    }
    
    public class GraphQlQueryParameter<T> : QueryBuilderParameter<T>
    {
        private string _formatMask;
    
        public string FormatMask
        {
            get => _formatMask;
            set => _formatMask =
                typeof(IFormattable).GetTypeInfo().IsAssignableFrom(typeof(T))
                    ? value
                    : throw new InvalidOperationException($"Value must be of {nameof(IFormattable)} type. ");
        }
    
        public GraphQlQueryParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
        {
        }
    }
    
    public abstract class GraphQlDirective
    {
        private readonly Dictionary<string, QueryBuilderParameter> _arguments = new Dictionary<string, QueryBuilderParameter>();
    
        internal IEnumerable<KeyValuePair<string, QueryBuilderParameter>> Arguments => _arguments;
    
        public string Name { get; }
    
        protected GraphQlDirective(string name)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(name), name);
            Name = name;
        }
    
        protected void AddArgument(string name, QueryBuilderParameter value)
        {
            if (value != null)
                _arguments[name] = value;
        }
    }
    
    public abstract class GraphQlQueryBuilder : IGraphQlQueryBuilder
    {
        private readonly Dictionary<string, GraphQlFieldCriteria> _fieldCriteria = new Dictionary<string, GraphQlFieldCriteria>();
    
        private string _operationType { get; }
        private string _operationName { get; }
        private Dictionary<string, GraphQlFragmentCriteria> _fragments;
        private List<QueryBuilderArgumentInfo> _queryParameters;
    
        protected abstract string TypeName { get; }
    
        public abstract IReadOnlyList<FieldMetadata> AllFields { get; }
    
        protected GraphQlQueryBuilder(string operationType, string operationName)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(operationName), operationName);
            _operationType = operationType;
            _operationName = operationName;
        }
    
        public virtual void Clear()
        {
            _fieldCriteria.Clear();
            _fragments?.Clear();
            _queryParameters?.Clear();
        }
    
        void IGraphQlQueryBuilder.IncludeAllFields()
        {
            IncludeAllFields();
        }
    
        public string Build(Formatting formatting = Formatting.None, byte indentationSize = 2)
        {
            return Build(formatting, 1, indentationSize);
        }
    
        protected void IncludeAllFields()
        {
            IncludeFields(AllFields);
        }
    
        protected virtual string Build(Formatting formatting, int level, byte indentationSize)
        {
            var isIndentedFormatting = formatting == Formatting.Indented;
            var separator = String.Empty;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
    
            if (!String.IsNullOrEmpty(_operationType))
            {
                builder.Append(_operationType);
    
                if (!String.IsNullOrEmpty(_operationName))
                {
                    builder.Append(" ");
                    builder.Append(_operationName);
                }
    
                if (_queryParameters?.Count > 0)
                {
                    builder.Append(indentationSpace);
                    builder.Append("(");
    
                    foreach (var queryParameterInfo in _queryParameters)
                    {
                        if (isIndentedFormatting)
                        {
                            builder.AppendLine(separator);
                            builder.Append(GraphQlQueryHelper.GetIndentation(level, indentationSize));
                        }
                        else
                            builder.Append(separator);
                        
                        builder.Append("$");
                        builder.Append(queryParameterInfo.ArgumentValue.Name);
                        builder.Append(":");
                        builder.Append(indentationSpace);
    
                        builder.Append(queryParameterInfo.ArgumentValue.GraphQlTypeName);
    
                        if (!queryParameterInfo.ArgumentValue.GraphQlTypeName.EndsWith("!"))
                        {
                            builder.Append(indentationSpace);
                            builder.Append("=");
                            builder.Append(indentationSpace);
                            builder.Append(GraphQlQueryHelper.BuildArgumentValue(queryParameterInfo.ArgumentValue.Value, queryParameterInfo.FormatMask, formatting, 0, indentationSize));
                        }
    
                        separator = ",";
                    }
    
                    builder.Append(")");
                }
            }
    
            builder.Append(indentationSpace);
            builder.Append("{");
    
            if (isIndentedFormatting)
                builder.AppendLine();
    
            separator = String.Empty;
            
            foreach (var criteria in _fieldCriteria.Values.Concat(_fragments?.Values ?? Enumerable.Empty<GraphQlFragmentCriteria>()))
            {
                var fieldCriteria = criteria.Build(formatting, level, indentationSize);
                if (isIndentedFormatting)
                    builder.AppendLine(fieldCriteria);
                else if (!String.IsNullOrEmpty(fieldCriteria))
                {
                    builder.Append(separator);
                    builder.Append(fieldCriteria);
                }
    
                separator = ",";
            }
    
            if (isIndentedFormatting)
                builder.Append(GraphQlQueryHelper.GetIndentation(level - 1, indentationSize));
            
            builder.Append("}");
    
            return builder.ToString();
        }
    
        protected void IncludeScalarField(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlScalarFieldCriteria(fieldName, alias, args, directives);
        }
    
        protected void IncludeObjectField(string fieldName, string alias, GraphQlQueryBuilder objectFieldQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlObjectFieldCriteria(fieldName, alias, objectFieldQueryBuilder, args, directives);
        }
    
        protected void IncludeFragment(GraphQlQueryBuilder objectFieldQueryBuilder, GraphQlDirective[] directives)
        {
            _fragments = _fragments ?? new Dictionary<string, GraphQlFragmentCriteria>();
            _fragments[objectFieldQueryBuilder.TypeName] = new GraphQlFragmentCriteria(objectFieldQueryBuilder, directives);
        }
    
        protected void ExcludeField(string fieldName)
        {
            if (fieldName == null)
                throw new ArgumentNullException(nameof(fieldName));
    
            _fieldCriteria.Remove(fieldName);
        }
    
        protected void IncludeFields(IEnumerable<FieldMetadata> fields)
        {
            IncludeFields(fields, null);
        }
    
        private void IncludeFields(IEnumerable<FieldMetadata> fields, List<Type> parentTypes)
        {
            foreach (var field in fields)
            {
                if (field.QueryBuilderType == null)
                    IncludeScalarField(field.Name, field.DefaultAlias, null, null);
                else
                {
                    var builderType = GetType();
    
                    if (parentTypes != null && parentTypes.Any(t => t.IsAssignableFrom(field.QueryBuilderType)))
                        continue;
    
                    parentTypes?.Add(builderType);
    
                    var queryBuilder = InitializeChildBuilder(builderType, field.QueryBuilderType, parentTypes);
    
                    var includeFragmentMethods = field.QueryBuilderType.GetMethods().Where(IsIncludeFragmentMethod);
    
                    foreach (var includeFragmentMethod in includeFragmentMethods)
                        includeFragmentMethod.Invoke(queryBuilder, new object[] { InitializeChildBuilder(builderType, includeFragmentMethod.GetParameters()[0].ParameterType, parentTypes) });
    
                    IncludeObjectField(field.Name, field.DefaultAlias, queryBuilder, null, null);
                }
            }
        }
    
        private static GraphQlQueryBuilder InitializeChildBuilder(Type parentQueryBuilderType, Type queryBuilderType, List<Type> parentTypes)
        {
            var queryBuilder = (GraphQlQueryBuilder)Activator.CreateInstance(queryBuilderType);
            queryBuilder.IncludeFields(queryBuilder.AllFields, parentTypes ?? new List<Type> { parentQueryBuilderType });
            return queryBuilder;
        }
    
        private static bool IsIncludeFragmentMethod(MethodInfo methodInfo)
        {
            if (!methodInfo.Name.StartsWith("With") || !methodInfo.Name.EndsWith("Fragment"))
                return false;
    
            var parameters = methodInfo.GetParameters();
            return parameters.Length == 1 && parameters[0].ParameterType.IsSubclassOf(typeof(GraphQlQueryBuilder));
        }
    
        protected void AddParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            if (_queryParameters == null)
                _queryParameters = new List<QueryBuilderArgumentInfo>();
            
            _queryParameters.Add(new QueryBuilderArgumentInfo { ArgumentValue = parameter, FormatMask = parameter.FormatMask });
        }
    
        private abstract class GraphQlFieldCriteria
        {
            private readonly IList<QueryBuilderArgumentInfo> _args;
            private readonly GraphQlDirective[] _directives;
    
            protected readonly string FieldName;
            protected readonly string Alias;
    
            protected static string GetIndentation(Formatting formatting, int level, byte indentationSize) =>
                formatting == Formatting.Indented ? GraphQlQueryHelper.GetIndentation(level, indentationSize) : null;
    
            protected GraphQlFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(alias), alias);
                FieldName = fieldName;
                Alias = alias;
                _args = args;
                _directives = directives;
            }
    
            public abstract string Build(Formatting formatting, int level, byte indentationSize);
    
            protected string BuildArgumentClause(Formatting formatting, int level, byte indentationSize)
            {
                var separator = formatting == Formatting.Indented ? " " : null;
                var argumentCount = _args?.Count ?? 0;
                if (argumentCount == 0)
                    return String.Empty;
    
                var arguments =
                    _args.Select(
                        a => $"{a.ArgumentName}:{separator}{(a.ArgumentValue.Name == null ? GraphQlQueryHelper.BuildArgumentValue(a.ArgumentValue.Value, a.FormatMask, formatting, level, indentationSize) : "$" + a.ArgumentValue.Name)}");
    
                return $"({String.Join($",{separator}", arguments)})";
            }
    
            protected string BuildDirectiveClause(Formatting formatting, int level, byte indentationSize) =>
                _directives == null ? null : String.Concat(_directives.Select(d => d == null ? null : GraphQlQueryHelper.BuildDirective(d, formatting, level, indentationSize)));
    
            protected static string BuildAliasPrefix(string alias, Formatting formatting)
            {
                var separator = formatting == Formatting.Indented ? " " : String.Empty;
                return String.IsNullOrWhiteSpace(alias) ? null : alias + ':' + separator;
            }
        }
    
        private class GraphQlScalarFieldCriteria : GraphQlFieldCriteria
        {
            public GraphQlScalarFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
            }
    
            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                GetIndentation(formatting, level, indentationSize) +
                BuildAliasPrefix(Alias, formatting) +
                FieldName +
                BuildArgumentClause(formatting, level, indentationSize) +
                BuildDirectiveClause(formatting, level, indentationSize);
        }
    
        private class GraphQlObjectFieldCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlObjectFieldCriteria(string fieldName, string alias, GraphQlQueryBuilder objectQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                _objectQueryBuilder._fieldCriteria.Count > 0 || _objectQueryBuilder._fragments?.Count > 0
                    ? GetIndentation(formatting, level, indentationSize) + BuildAliasPrefix(Alias, formatting) + FieldName +
                      BuildArgumentClause(formatting, level, indentationSize) + BuildDirectiveClause(formatting, level, indentationSize) + _objectQueryBuilder.Build(formatting, level + 1, indentationSize)
                    : null;
        }
    
        private class GraphQlFragmentCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlFragmentCriteria(GraphQlQueryBuilder objectQueryBuilder, GraphQlDirective[] directives) : base(objectQueryBuilder.TypeName, null, null, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                _objectQueryBuilder._fieldCriteria.Count == 0
                    ? null
                    : GetIndentation(formatting, level, indentationSize) + "..." + (formatting == Formatting.Indented ? " " : null) + "on " +
                      FieldName + BuildArgumentClause(formatting, level, indentationSize) + BuildDirectiveClause(formatting, level, indentationSize) + _objectQueryBuilder.Build(formatting, level + 1, indentationSize);
        }
    }
    
    public abstract class GraphQlQueryBuilder<TQueryBuilder> : GraphQlQueryBuilder where TQueryBuilder : GraphQlQueryBuilder<TQueryBuilder>
    {
        protected GraphQlQueryBuilder(string operationType = null, string operationName = null) : base(operationType, operationName)
        {
        }
    
        public TQueryBuilder WithAllFields()
        {
            IncludeAllFields();
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder WithAllScalarFields()
        {
            IncludeFields(AllFields.Where(f => !f.IsComplex));
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder ExceptField(string fieldName)
        {
            ExcludeField(fieldName);
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder WithTypeName(string alias = null, params GraphQlDirective[] directives)
        {
            IncludeScalarField("__typename", alias, null, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithScalarField(string fieldName, string alias, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeScalarField(fieldName, alias, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithObjectField(string fieldName, string alias, GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeObjectField(fieldName, alias, queryBuilder, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithFragment(GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives)
        {
            IncludeFragment(queryBuilder, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithParameterInternal<T>(GraphQlQueryParameter<T> parameter)
        {
            AddParameter(parameter);
            return (TQueryBuilder)this;
        }
    }
    
    public abstract class GraphQlResponse<TDataContract>
    {
        public TDataContract Data { get; set; }
        public ICollection<QueryError> Errors { get; set; }
    }
    
    public class QueryError
    {
        public string Message { get; set; }
        public ICollection<ErrorLocation> Locations { get; set; }
    }
    
    public class ErrorLocation
    {
        public int Line { get; set; }
        public int Column { get; set; }
    }
    #endregion

    #region enums
    public enum EventStatus
    {
        [EnumMember(Value = "PENDING")] Pending,
        [EnumMember(Value = "CONFIRMED")] Confirmed,
        [EnumMember(Value = "FAILED")] Failed
    }

    public enum PresenceStatusEnum
    {
        [EnumMember(Value = "SIGNEDUP")] Signedup,
        [EnumMember(Value = "ATTEND")] Attend,
        [EnumMember(Value = "DIDNOTATTEND")] Didnotattend
    }
    #endregion

    #region directives
    public class AuthorizeDirective : GraphQlDirective
    {
        public AuthorizeDirective(QueryBuilderParameter<string> policy = null, QueryBuilderParameter<IEnumerable<string>> roles = null) : base("authorize")
        {
            AddArgument("policy", policy);
            AddArgument("roles", roles);
        }
    }

    public class SkipDirective : GraphQlDirective
    {
        public SkipDirective(QueryBuilderParameter<bool> @if) : base("skip")
        {
            AddArgument("if", @if);
        }
    }

    public class IncludeDirective : GraphQlDirective
    {
        public IncludeDirective(QueryBuilderParameter<bool> @if) : base("include")
        {
            AddArgument("if", @if);
        }
    }

    public class SourceDirective : GraphQlDirective
    {
        public SourceDirective(QueryBuilderParameter<object> name, QueryBuilderParameter<object> schema) : base("source")
        {
            AddArgument("name", name);
            AddArgument("schema", schema);
        }
    }
    #endregion

    #region builder classes
    public class QueryQueryBuilder : GraphQlQueryBuilder<QueryQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "bookings", IsComplex = true, QueryBuilderType = typeof(RoomBookingQueryBuilder) },
                new FieldMetadata { Name = "bookingsForClub", IsComplex = true, QueryBuilderType = typeof(RoomBookingQueryBuilder) },
                new FieldMetadata { Name = "clubByID", IsComplex = true, QueryBuilderType = typeof(ClubQueryBuilder) },
                new FieldMetadata { Name = "clubByName", IsComplex = true, QueryBuilderType = typeof(ClubQueryBuilder) },
                new FieldMetadata { Name = "clubmemberapi_clubSubscriptions", IsComplex = true, QueryBuilderType = typeof(ClubmemberClubSubscriptionQueryBuilder) },
                new FieldMetadata { Name = "clubMembers", IsComplex = true, QueryBuilderType = typeof(ClubMemberQueryBuilder) },
                new FieldMetadata { Name = "clubs", IsComplex = true, QueryBuilderType = typeof(ClubQueryBuilder) },
                new FieldMetadata { Name = "clubSubscriptionByID", IsComplex = true, QueryBuilderType = typeof(ClubSubscriptionQueryBuilder) },
                new FieldMetadata { Name = "clubSubscriptions", IsComplex = true, QueryBuilderType = typeof(ClubSubscriptionQueryBuilder) },
                new FieldMetadata { Name = "currentUser", IsComplex = true, QueryBuilderType = typeof(IdentityApplicationUserQueryBuilder) },
                new FieldMetadata { Name = "eventParticipants", IsComplex = true, QueryBuilderType = typeof(EventParticipantQueryBuilder) },
                new FieldMetadata { Name = "events", IsComplex = true, QueryBuilderType = typeof(EventQueryBuilder) },
                new FieldMetadata { Name = "eventsConfirmed", IsComplex = true, QueryBuilderType = typeof(EventQueryBuilder) },
                new FieldMetadata { Name = "eventsForClub", IsComplex = true, QueryBuilderType = typeof(EventQueryBuilder) },
                new FieldMetadata { Name = "eventsForUser", IsComplex = true, QueryBuilderType = typeof(EventVerificationQueryBuilder) },
                new FieldMetadata { Name = "eventVerifications", IsComplex = true, QueryBuilderType = typeof(EventVerificationQueryBuilder) },
                new FieldMetadata { Name = "getEvent", IsComplex = true, QueryBuilderType = typeof(EventQueryBuilder) },
                new FieldMetadata { Name = "instructorInClub", IsComplex = true, QueryBuilderType = typeof(PermissionRoleQueryBuilder) },
                new FieldMetadata { Name = "membersForClub", IsComplex = true, QueryBuilderType = typeof(ClubMemberQueryBuilder) },
                new FieldMetadata { Name = "myClubs", IsComplex = true, QueryBuilderType = typeof(ClubQueryBuilder) },
                new FieldMetadata { Name = "permissions", IsComplex = true, QueryBuilderType = typeof(PermissionUserQueryBuilder) },
                new FieldMetadata { Name = "permissionsInClub", IsComplex = true, QueryBuilderType = typeof(PermissionRoleQueryBuilder) },
                new FieldMetadata { Name = "rolesForUserId", IsComplex = true, QueryBuilderType = typeof(PermissionRoleQueryBuilder) },
                new FieldMetadata { Name = "roomapi_clubs", IsComplex = true, QueryBuilderType = typeof(RoomClubQueryBuilder) },
                new FieldMetadata { Name = "roomById", IsComplex = true, QueryBuilderType = typeof(RoomQueryBuilder) },
                new FieldMetadata { Name = "rooms", IsComplex = true, QueryBuilderType = typeof(RoomQueryBuilder) },
                new FieldMetadata { Name = "roomsForClub", IsComplex = true, QueryBuilderType = typeof(RoomQueryBuilder) },
                new FieldMetadata { Name = "subscriptionapi_clubs", IsComplex = true, QueryBuilderType = typeof(SubscriptionClubQueryBuilder) },
                new FieldMetadata { Name = "subscriptionsForClub", IsComplex = true, QueryBuilderType = typeof(ClubSubscriptionQueryBuilder) },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(IdentityApplicationUserQueryBuilder) },
                new FieldMetadata { Name = "userRoles", IsComplex = true, QueryBuilderType = typeof(PermissionRoleQueryBuilder) },
                new FieldMetadata { Name = "users", IsComplex = true, QueryBuilderType = typeof(IdentityApplicationUserQueryBuilder) },
                new FieldMetadata { Name = "usersById", IsComplex = true, QueryBuilderType = typeof(IdentityApplicationUserQueryBuilder) }
            };

        protected override string TypeName { get { return "Query"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public QueryQueryBuilder(string operationName = null) : base("query", operationName)
        {
        }

        public QueryQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public QueryQueryBuilder WithBookings(RoomBookingQueryBuilder roomBookingQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("bookings", alias, roomBookingQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public QueryQueryBuilder ExceptBookings()
        {
            return ExceptField("bookings");
        }

        public QueryQueryBuilder WithBookingsForClub(RoomBookingQueryBuilder roomBookingQueryBuilder, QueryBuilderParameter<string> clubId, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "clubId", ArgumentValue = clubId} );
            return WithObjectField("bookingsForClub", alias, roomBookingQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptBookingsForClub()
        {
            return ExceptField("bookingsForClub");
        }

        public QueryQueryBuilder WithClubById(ClubQueryBuilder clubQueryBuilder, QueryBuilderParameter<string> clubId, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "clubId", ArgumentValue = clubId} );
            return WithObjectField("clubByID", alias, clubQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptClubById()
        {
            return ExceptField("clubByID");
        }

        public QueryQueryBuilder WithClubByName(ClubQueryBuilder clubQueryBuilder, QueryBuilderParameter<string> name = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (name != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "name", ArgumentValue = name} );

            return WithObjectField("clubByName", alias, clubQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptClubByName()
        {
            return ExceptField("clubByName");
        }

        public QueryQueryBuilder WithClubmemberapiClubSubscriptions(ClubmemberClubSubscriptionQueryBuilder clubmemberClubSubscriptionQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("clubmemberapi_clubSubscriptions", alias, clubmemberClubSubscriptionQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public QueryQueryBuilder ExceptClubmemberapiClubSubscriptions()
        {
            return ExceptField("clubmemberapi_clubSubscriptions");
        }

        public QueryQueryBuilder WithClubMembers(ClubMemberQueryBuilder clubMemberQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("clubMembers", alias, clubMemberQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public QueryQueryBuilder ExceptClubMembers()
        {
            return ExceptField("clubMembers");
        }

        public QueryQueryBuilder WithClubs(ClubQueryBuilder clubQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("clubs", alias, clubQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public QueryQueryBuilder ExceptClubs()
        {
            return ExceptField("clubs");
        }

        public QueryQueryBuilder WithClubSubscriptionById(ClubSubscriptionQueryBuilder clubSubscriptionQueryBuilder, QueryBuilderParameter<string> clubSubscriptionId, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "clubSubscriptionId", ArgumentValue = clubSubscriptionId} );
            return WithObjectField("clubSubscriptionByID", alias, clubSubscriptionQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptClubSubscriptionById()
        {
            return ExceptField("clubSubscriptionByID");
        }

        public QueryQueryBuilder WithClubSubscriptions(ClubSubscriptionQueryBuilder clubSubscriptionQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("clubSubscriptions", alias, clubSubscriptionQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public QueryQueryBuilder ExceptClubSubscriptions()
        {
            return ExceptField("clubSubscriptions");
        }

        public QueryQueryBuilder WithCurrentUser(IdentityApplicationUserQueryBuilder identityApplicationUserQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("currentUser", alias, identityApplicationUserQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public QueryQueryBuilder ExceptCurrentUser()
        {
            return ExceptField("currentUser");
        }

        public QueryQueryBuilder WithEventParticipants(EventParticipantQueryBuilder eventParticipantQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("eventParticipants", alias, eventParticipantQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public QueryQueryBuilder ExceptEventParticipants()
        {
            return ExceptField("eventParticipants");
        }

        public QueryQueryBuilder WithEvents(EventQueryBuilder eventQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("events", alias, eventQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public QueryQueryBuilder ExceptEvents()
        {
            return ExceptField("events");
        }

        public QueryQueryBuilder WithEventsConfirmed(EventQueryBuilder eventQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("eventsConfirmed", alias, eventQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public QueryQueryBuilder ExceptEventsConfirmed()
        {
            return ExceptField("eventsConfirmed");
        }

        public QueryQueryBuilder WithEventsForClub(EventQueryBuilder eventQueryBuilder, QueryBuilderParameter<string> clubId, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "clubId", ArgumentValue = clubId} );
            return WithObjectField("eventsForClub", alias, eventQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptEventsForClub()
        {
            return ExceptField("eventsForClub");
        }

        public QueryQueryBuilder WithEventsForUser(EventVerificationQueryBuilder eventVerificationQueryBuilder, QueryBuilderParameter<string> userId, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );
            return WithObjectField("eventsForUser", alias, eventVerificationQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptEventsForUser()
        {
            return ExceptField("eventsForUser");
        }

        public QueryQueryBuilder WithEventVerifications(EventVerificationQueryBuilder eventVerificationQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("eventVerifications", alias, eventVerificationQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public QueryQueryBuilder ExceptEventVerifications()
        {
            return ExceptField("eventVerifications");
        }

        public QueryQueryBuilder WithGetEvent(EventQueryBuilder eventQueryBuilder, QueryBuilderParameter<string> eventId, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "eventId", ArgumentValue = eventId} );
            return WithObjectField("getEvent", alias, eventQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptGetEvent()
        {
            return ExceptField("getEvent");
        }

        public QueryQueryBuilder WithInstructorInClub(PermissionRoleQueryBuilder permissionRoleQueryBuilder, QueryBuilderParameter<string> clubId, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "clubId", ArgumentValue = clubId} );
            return WithObjectField("instructorInClub", alias, permissionRoleQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptInstructorInClub()
        {
            return ExceptField("instructorInClub");
        }

        public QueryQueryBuilder WithMembersForClub(ClubMemberQueryBuilder clubMemberQueryBuilder, QueryBuilderParameter<string> clubId, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "clubId", ArgumentValue = clubId} );
            return WithObjectField("membersForClub", alias, clubMemberQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptMembersForClub()
        {
            return ExceptField("membersForClub");
        }

        public QueryQueryBuilder WithMyClubs(ClubQueryBuilder clubQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("myClubs", alias, clubQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public QueryQueryBuilder ExceptMyClubs()
        {
            return ExceptField("myClubs");
        }

        public QueryQueryBuilder WithPermissions(PermissionUserQueryBuilder permissionUserQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("permissions", alias, permissionUserQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public QueryQueryBuilder ExceptPermissions()
        {
            return ExceptField("permissions");
        }

        public QueryQueryBuilder WithPermissionsInClub(PermissionRoleQueryBuilder permissionRoleQueryBuilder, QueryBuilderParameter<string> clubId, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "clubId", ArgumentValue = clubId} );
            return WithObjectField("permissionsInClub", alias, permissionRoleQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptPermissionsInClub()
        {
            return ExceptField("permissionsInClub");
        }

        public QueryQueryBuilder WithRolesForUserId(PermissionRoleQueryBuilder permissionRoleQueryBuilder, QueryBuilderParameter<string> userId, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );
            return WithObjectField("rolesForUserId", alias, permissionRoleQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptRolesForUserId()
        {
            return ExceptField("rolesForUserId");
        }

        public QueryQueryBuilder WithRoomapiClubs(RoomClubQueryBuilder roomClubQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("roomapi_clubs", alias, roomClubQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public QueryQueryBuilder ExceptRoomapiClubs()
        {
            return ExceptField("roomapi_clubs");
        }

        public QueryQueryBuilder WithRoomById(RoomQueryBuilder roomQueryBuilder, QueryBuilderParameter<string> roomId, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "roomId", ArgumentValue = roomId} );
            return WithObjectField("roomById", alias, roomQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptRoomById()
        {
            return ExceptField("roomById");
        }

        public QueryQueryBuilder WithRooms(RoomQueryBuilder roomQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("rooms", alias, roomQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public QueryQueryBuilder ExceptRooms()
        {
            return ExceptField("rooms");
        }

        public QueryQueryBuilder WithRoomsForClub(RoomQueryBuilder roomQueryBuilder, QueryBuilderParameter<string> clubId, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "clubId", ArgumentValue = clubId} );
            return WithObjectField("roomsForClub", alias, roomQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptRoomsForClub()
        {
            return ExceptField("roomsForClub");
        }

        public QueryQueryBuilder WithSubscriptionapiClubs(SubscriptionClubQueryBuilder subscriptionClubQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("subscriptionapi_clubs", alias, subscriptionClubQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public QueryQueryBuilder ExceptSubscriptionapiClubs()
        {
            return ExceptField("subscriptionapi_clubs");
        }

        public QueryQueryBuilder WithSubscriptionsForClub(ClubSubscriptionQueryBuilder clubSubscriptionQueryBuilder, QueryBuilderParameter<string> clubId, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "clubId", ArgumentValue = clubId} );
            return WithObjectField("subscriptionsForClub", alias, clubSubscriptionQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptSubscriptionsForClub()
        {
            return ExceptField("subscriptionsForClub");
        }

        public QueryQueryBuilder WithUser(IdentityApplicationUserQueryBuilder identityApplicationUserQueryBuilder, QueryBuilderParameter<string> id, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("user", alias, identityApplicationUserQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }

        public QueryQueryBuilder WithUserRoles(PermissionRoleQueryBuilder permissionRoleQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("userRoles", alias, permissionRoleQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public QueryQueryBuilder ExceptUserRoles()
        {
            return ExceptField("userRoles");
        }

        public QueryQueryBuilder WithUsers(IdentityApplicationUserQueryBuilder identityApplicationUserQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("users", alias, identityApplicationUserQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public QueryQueryBuilder ExceptUsers()
        {
            return ExceptField("users");
        }

        public QueryQueryBuilder WithUsersById(IdentityApplicationUserQueryBuilder identityApplicationUserQueryBuilder, QueryBuilderParameter<IEnumerable<string>> ids = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (ids != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "ids", ArgumentValue = ids} );

            return WithObjectField("usersById", alias, identityApplicationUserQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptUsersById()
        {
            return ExceptField("usersById");
        }
    }

    public class MutationQueryBuilder : GraphQlQueryBuilder<MutationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "addInstructor", IsComplex = true, QueryBuilderType = typeof(PermissionRoleQueryBuilder) },
                new FieldMetadata { Name = "createClub", IsComplex = true, QueryBuilderType = typeof(ClubQueryBuilder) },
                new FieldMetadata { Name = "createClubMember", IsComplex = true, QueryBuilderType = typeof(ClubMemberQueryBuilder) },
                new FieldMetadata { Name = "createClubSubscription", IsComplex = true, QueryBuilderType = typeof(ClubSubscriptionQueryBuilder) },
                new FieldMetadata { Name = "createEvent", IsComplex = true, QueryBuilderType = typeof(EventQueryBuilder) },
                new FieldMetadata { Name = "createRoom", IsComplex = true, QueryBuilderType = typeof(RoomQueryBuilder) },
                new FieldMetadata { Name = "createUser", IsComplex = true, QueryBuilderType = typeof(IdentityResponseQueryBuilder) },
                new FieldMetadata { Name = "deleteRoom", IsComplex = true, QueryBuilderType = typeof(RoomQueryBuilder) },
                new FieldMetadata { Name = "editUser", IsComplex = true, QueryBuilderType = typeof(IdentityApplicationUserQueryBuilder) },
                new FieldMetadata { Name = "loginUser", IsComplex = true, QueryBuilderType = typeof(IdentityResponseQueryBuilder) },
                new FieldMetadata { Name = "removeInstructor", IsComplex = true, QueryBuilderType = typeof(PermissionRoleQueryBuilder) },
                new FieldMetadata { Name = "signUpFreeEvent", IsComplex = true, QueryBuilderType = typeof(EventParticipantQueryBuilder) },
                new FieldMetadata { Name = "updateClub", IsComplex = true, QueryBuilderType = typeof(ClubQueryBuilder) },
                new FieldMetadata { Name = "updateClubMember", IsComplex = true, QueryBuilderType = typeof(ClubMemberQueryBuilder) },
                new FieldMetadata { Name = "updateClubSubscription", IsComplex = true, QueryBuilderType = typeof(ClubSubscriptionQueryBuilder) },
                new FieldMetadata { Name = "updateEvent", IsComplex = true, QueryBuilderType = typeof(EventQueryBuilder) },
                new FieldMetadata { Name = "updateRoom", IsComplex = true, QueryBuilderType = typeof(RoomQueryBuilder) },
                new FieldMetadata { Name = "verifyCode", IsComplex = true, QueryBuilderType = typeof(EventVerificationQueryBuilder) }
            };

        protected override string TypeName { get { return "Mutation"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MutationQueryBuilder(string operationName = null) : base("mutation", operationName)
        {
        }

        public MutationQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public MutationQueryBuilder WithAddInstructor(PermissionRoleQueryBuilder permissionRoleQueryBuilder, QueryBuilderParameter<string> clubId, QueryBuilderParameter<string> instructorId, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "clubId", ArgumentValue = clubId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "instructorId", ArgumentValue = instructorId} );
            return WithObjectField("addInstructor", alias, permissionRoleQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptAddInstructor()
        {
            return ExceptField("addInstructor");
        }

        public MutationQueryBuilder WithCreateClub(ClubQueryBuilder clubQueryBuilder, QueryBuilderParameter<CreateClubRequestInput> request = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("createClub", alias, clubQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptCreateClub()
        {
            return ExceptField("createClub");
        }

        public MutationQueryBuilder WithCreateClubMember(ClubMemberQueryBuilder clubMemberQueryBuilder, QueryBuilderParameter<CreateClubMemberRequestInput> request = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("createClubMember", alias, clubMemberQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptCreateClubMember()
        {
            return ExceptField("createClubMember");
        }

        public MutationQueryBuilder WithCreateClubSubscription(ClubSubscriptionQueryBuilder clubSubscriptionQueryBuilder, QueryBuilderParameter<CreateClubSubscriptionRequestInput> request = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("createClubSubscription", alias, clubSubscriptionQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptCreateClubSubscription()
        {
            return ExceptField("createClubSubscription");
        }

        public MutationQueryBuilder WithCreateEvent(EventQueryBuilder eventQueryBuilder, QueryBuilderParameter<CreateEventRequestInput> request = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("createEvent", alias, eventQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptCreateEvent()
        {
            return ExceptField("createEvent");
        }

        public MutationQueryBuilder WithCreateRoom(RoomQueryBuilder roomQueryBuilder, QueryBuilderParameter<CreateRoomRequestInput> request = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("createRoom", alias, roomQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptCreateRoom()
        {
            return ExceptField("createRoom");
        }

        public MutationQueryBuilder WithCreateUser(IdentityResponseQueryBuilder identityResponseQueryBuilder, QueryBuilderParameter<CreateUserRequestInput> request = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("createUser", alias, identityResponseQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptCreateUser()
        {
            return ExceptField("createUser");
        }

        public MutationQueryBuilder WithDeleteRoom(RoomQueryBuilder roomQueryBuilder, QueryBuilderParameter<string> id, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("deleteRoom", alias, roomQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptDeleteRoom()
        {
            return ExceptField("deleteRoom");
        }

        public MutationQueryBuilder WithEditUser(IdentityApplicationUserQueryBuilder identityApplicationUserQueryBuilder, QueryBuilderParameter<EditUserRequestInput> request = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("editUser", alias, identityApplicationUserQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptEditUser()
        {
            return ExceptField("editUser");
        }

        public MutationQueryBuilder WithLoginUser(IdentityResponseQueryBuilder identityResponseQueryBuilder, QueryBuilderParameter<LoginUserRequestInput> request = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("loginUser", alias, identityResponseQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptLoginUser()
        {
            return ExceptField("loginUser");
        }

        public MutationQueryBuilder WithRemoveInstructor(PermissionRoleQueryBuilder permissionRoleQueryBuilder, QueryBuilderParameter<string> clubId, QueryBuilderParameter<string> instructorId, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "clubId", ArgumentValue = clubId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "instructorId", ArgumentValue = instructorId} );
            return WithObjectField("removeInstructor", alias, permissionRoleQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptRemoveInstructor()
        {
            return ExceptField("removeInstructor");
        }

        public MutationQueryBuilder WithSignUpFreeEvent(EventParticipantQueryBuilder eventParticipantQueryBuilder, QueryBuilderParameter<string> eventId, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "eventId", ArgumentValue = eventId} );
            return WithObjectField("signUpFreeEvent", alias, eventParticipantQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptSignUpFreeEvent()
        {
            return ExceptField("signUpFreeEvent");
        }

        public MutationQueryBuilder WithUpdateClub(ClubQueryBuilder clubQueryBuilder, QueryBuilderParameter<string> clubId, QueryBuilderParameter<UpdateClubRequestInput> request = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "clubId", ArgumentValue = clubId} );
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("updateClub", alias, clubQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptUpdateClub()
        {
            return ExceptField("updateClub");
        }

        public MutationQueryBuilder WithUpdateClubMember(ClubMemberQueryBuilder clubMemberQueryBuilder, QueryBuilderParameter<UpdateClubMemberRequestInput> request = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("updateClubMember", alias, clubMemberQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptUpdateClubMember()
        {
            return ExceptField("updateClubMember");
        }

        public MutationQueryBuilder WithUpdateClubSubscription(ClubSubscriptionQueryBuilder clubSubscriptionQueryBuilder, QueryBuilderParameter<string> id, QueryBuilderParameter<UpdateClubSubscriptionRequestInput> request = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("updateClubSubscription", alias, clubSubscriptionQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptUpdateClubSubscription()
        {
            return ExceptField("updateClubSubscription");
        }

        public MutationQueryBuilder WithUpdateEvent(EventQueryBuilder eventQueryBuilder, QueryBuilderParameter<string> eventId, QueryBuilderParameter<UpdateEventRequestInput> request = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "eventId", ArgumentValue = eventId} );
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("updateEvent", alias, eventQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptUpdateEvent()
        {
            return ExceptField("updateEvent");
        }

        public MutationQueryBuilder WithUpdateRoom(RoomQueryBuilder roomQueryBuilder, QueryBuilderParameter<string> id, QueryBuilderParameter<UpdateRoomRequestInput> request = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("updateRoom", alias, roomQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptUpdateRoom()
        {
            return ExceptField("updateRoom");
        }

        public MutationQueryBuilder WithVerifyCode(EventVerificationQueryBuilder eventVerificationQueryBuilder, QueryBuilderParameter<VerifyCodeRequestInput> request = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("verifyCode", alias, eventVerificationQueryBuilder, new GraphQlDirective[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptVerifyCode()
        {
            return ExceptField("verifyCode");
        }
    }

    public class IdentityApplicationUserQueryBuilder : GraphQlQueryBuilder<IdentityApplicationUserQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "accessFailedCount" },
                new FieldMetadata { Name = "birthDate", IsComplex = true },
                new FieldMetadata { Name = "concurrencyStamp" },
                new FieldMetadata { Name = "email" },
                new FieldMetadata { Name = "emailConfirmed" },
                new FieldMetadata { Name = "events", IsComplex = true, QueryBuilderType = typeof(EventVerificationQueryBuilder) },
                new FieldMetadata { Name = "id" },
                new FieldMetadata { Name = "lockoutEnabled" },
                new FieldMetadata { Name = "lockoutEnd", IsComplex = true },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "normalizedEmail" },
                new FieldMetadata { Name = "normalizedUserName" },
                new FieldMetadata { Name = "passwordHash" },
                new FieldMetadata { Name = "permissions", IsComplex = true, QueryBuilderType = typeof(PermissionRoleQueryBuilder) },
                new FieldMetadata { Name = "phoneNumber" },
                new FieldMetadata { Name = "phoneNumberConfirmed" },
                new FieldMetadata { Name = "securityStamp" },
                new FieldMetadata { Name = "twoFactorEnabled" },
                new FieldMetadata { Name = "userName" }
            };

        protected override string TypeName { get { return "identity_ApplicationUser"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public IdentityApplicationUserQueryBuilder WithAccessFailedCount(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("accessFailedCount", alias, new GraphQlDirective[] { skip, include });
        }

        public IdentityApplicationUserQueryBuilder ExceptAccessFailedCount()
        {
            return ExceptField("accessFailedCount");
        }

        public IdentityApplicationUserQueryBuilder WithBirthDate(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("birthDate", alias, new GraphQlDirective[] { skip, include });
        }

        public IdentityApplicationUserQueryBuilder ExceptBirthDate()
        {
            return ExceptField("birthDate");
        }

        public IdentityApplicationUserQueryBuilder WithConcurrencyStamp(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("concurrencyStamp", alias, new GraphQlDirective[] { skip, include });
        }

        public IdentityApplicationUserQueryBuilder ExceptConcurrencyStamp()
        {
            return ExceptField("concurrencyStamp");
        }

        public IdentityApplicationUserQueryBuilder WithEmail(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("email", alias, new GraphQlDirective[] { skip, include });
        }

        public IdentityApplicationUserQueryBuilder ExceptEmail()
        {
            return ExceptField("email");
        }

        public IdentityApplicationUserQueryBuilder WithEmailConfirmed(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("emailConfirmed", alias, new GraphQlDirective[] { skip, include });
        }

        public IdentityApplicationUserQueryBuilder ExceptEmailConfirmed()
        {
            return ExceptField("emailConfirmed");
        }

        public IdentityApplicationUserQueryBuilder WithEvents(EventVerificationQueryBuilder eventVerificationQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("events", alias, eventVerificationQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public IdentityApplicationUserQueryBuilder ExceptEvents()
        {
            return ExceptField("events");
        }

        public IdentityApplicationUserQueryBuilder WithId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { skip, include });
        }

        public IdentityApplicationUserQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public IdentityApplicationUserQueryBuilder WithLockoutEnabled(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("lockoutEnabled", alias, new GraphQlDirective[] { skip, include });
        }

        public IdentityApplicationUserQueryBuilder ExceptLockoutEnabled()
        {
            return ExceptField("lockoutEnabled");
        }

        public IdentityApplicationUserQueryBuilder WithLockoutEnd(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("lockoutEnd", alias, new GraphQlDirective[] { skip, include });
        }

        public IdentityApplicationUserQueryBuilder ExceptLockoutEnd()
        {
            return ExceptField("lockoutEnd");
        }

        public IdentityApplicationUserQueryBuilder WithName(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { skip, include });
        }

        public IdentityApplicationUserQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public IdentityApplicationUserQueryBuilder WithNormalizedEmail(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("normalizedEmail", alias, new GraphQlDirective[] { skip, include });
        }

        public IdentityApplicationUserQueryBuilder ExceptNormalizedEmail()
        {
            return ExceptField("normalizedEmail");
        }

        public IdentityApplicationUserQueryBuilder WithNormalizedUserName(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("normalizedUserName", alias, new GraphQlDirective[] { skip, include });
        }

        public IdentityApplicationUserQueryBuilder ExceptNormalizedUserName()
        {
            return ExceptField("normalizedUserName");
        }

        public IdentityApplicationUserQueryBuilder WithPasswordHash(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("passwordHash", alias, new GraphQlDirective[] { skip, include });
        }

        public IdentityApplicationUserQueryBuilder ExceptPasswordHash()
        {
            return ExceptField("passwordHash");
        }

        public IdentityApplicationUserQueryBuilder WithPermissions(PermissionRoleQueryBuilder permissionRoleQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("permissions", alias, permissionRoleQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public IdentityApplicationUserQueryBuilder ExceptPermissions()
        {
            return ExceptField("permissions");
        }

        public IdentityApplicationUserQueryBuilder WithPhoneNumber(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("phoneNumber", alias, new GraphQlDirective[] { skip, include });
        }

        public IdentityApplicationUserQueryBuilder ExceptPhoneNumber()
        {
            return ExceptField("phoneNumber");
        }

        public IdentityApplicationUserQueryBuilder WithPhoneNumberConfirmed(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("phoneNumberConfirmed", alias, new GraphQlDirective[] { skip, include });
        }

        public IdentityApplicationUserQueryBuilder ExceptPhoneNumberConfirmed()
        {
            return ExceptField("phoneNumberConfirmed");
        }

        public IdentityApplicationUserQueryBuilder WithSecurityStamp(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("securityStamp", alias, new GraphQlDirective[] { skip, include });
        }

        public IdentityApplicationUserQueryBuilder ExceptSecurityStamp()
        {
            return ExceptField("securityStamp");
        }

        public IdentityApplicationUserQueryBuilder WithTwoFactorEnabled(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("twoFactorEnabled", alias, new GraphQlDirective[] { skip, include });
        }

        public IdentityApplicationUserQueryBuilder ExceptTwoFactorEnabled()
        {
            return ExceptField("twoFactorEnabled");
        }

        public IdentityApplicationUserQueryBuilder WithUserName(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("userName", alias, new GraphQlDirective[] { skip, include });
        }

        public IdentityApplicationUserQueryBuilder ExceptUserName()
        {
            return ExceptField("userName");
        }
    }

    public class IdentityResponseQueryBuilder : GraphQlQueryBuilder<IdentityResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "token" },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(IdentityApplicationUserQueryBuilder) }
            };

        protected override string TypeName { get { return "identity_Response"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public IdentityResponseQueryBuilder WithToken(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("token", alias, new GraphQlDirective[] { skip, include });
        }

        public IdentityResponseQueryBuilder ExceptToken()
        {
            return ExceptField("token");
        }

        public IdentityResponseQueryBuilder WithUser(IdentityApplicationUserQueryBuilder identityApplicationUserQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("user", alias, identityApplicationUserQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public IdentityResponseQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class ClubQueryBuilder : GraphQlQueryBuilder<ClubQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "accountNumber" },
                new FieldMetadata { Name = "address" },
                new FieldMetadata { Name = "adminId" },
                new FieldMetadata { Name = "clubId" },
                new FieldMetadata { Name = "clubsubscription", IsComplex = true, QueryBuilderType = typeof(ClubSubscriptionQueryBuilder) },
                new FieldMetadata { Name = "description" },
                new FieldMetadata { Name = "events", IsComplex = true, QueryBuilderType = typeof(EventQueryBuilder) },
                new FieldMetadata { Name = "instructors", IsComplex = true, QueryBuilderType = typeof(PermissionRoleQueryBuilder) },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "phoneNumber" },
                new FieldMetadata { Name = "registrationNumber" },
                new FieldMetadata { Name = "rooms", IsComplex = true, QueryBuilderType = typeof(RoomQueryBuilder) },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(IdentityApplicationUserQueryBuilder) }
            };

        protected override string TypeName { get { return "Club"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ClubQueryBuilder WithAccountNumber(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("accountNumber", alias, new GraphQlDirective[] { skip, include });
        }

        public ClubQueryBuilder ExceptAccountNumber()
        {
            return ExceptField("accountNumber");
        }

        public ClubQueryBuilder WithAddress(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("address", alias, new GraphQlDirective[] { skip, include });
        }

        public ClubQueryBuilder ExceptAddress()
        {
            return ExceptField("address");
        }

        public ClubQueryBuilder WithAdminId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("adminId", alias, new GraphQlDirective[] { skip, include });
        }

        public ClubQueryBuilder ExceptAdminId()
        {
            return ExceptField("adminId");
        }

        public ClubQueryBuilder WithClubId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("clubId", alias, new GraphQlDirective[] { skip, include });
        }

        public ClubQueryBuilder ExceptClubId()
        {
            return ExceptField("clubId");
        }

        public ClubQueryBuilder WithClubsubscription(ClubSubscriptionQueryBuilder clubSubscriptionQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("clubsubscription", alias, clubSubscriptionQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public ClubQueryBuilder ExceptClubsubscription()
        {
            return ExceptField("clubsubscription");
        }

        public ClubQueryBuilder WithDescription(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { skip, include });
        }

        public ClubQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public ClubQueryBuilder WithEvents(EventQueryBuilder eventQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("events", alias, eventQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public ClubQueryBuilder ExceptEvents()
        {
            return ExceptField("events");
        }

        public ClubQueryBuilder WithInstructors(PermissionRoleQueryBuilder permissionRoleQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("instructors", alias, permissionRoleQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public ClubQueryBuilder ExceptInstructors()
        {
            return ExceptField("instructors");
        }

        public ClubQueryBuilder WithName(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { skip, include });
        }

        public ClubQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ClubQueryBuilder WithPhoneNumber(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("phoneNumber", alias, new GraphQlDirective[] { skip, include });
        }

        public ClubQueryBuilder ExceptPhoneNumber()
        {
            return ExceptField("phoneNumber");
        }

        public ClubQueryBuilder WithRegistrationNumber(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("registrationNumber", alias, new GraphQlDirective[] { skip, include });
        }

        public ClubQueryBuilder ExceptRegistrationNumber()
        {
            return ExceptField("registrationNumber");
        }

        public ClubQueryBuilder WithRooms(RoomQueryBuilder roomQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("rooms", alias, roomQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public ClubQueryBuilder ExceptRooms()
        {
            return ExceptField("rooms");
        }

        public ClubQueryBuilder WithUser(IdentityApplicationUserQueryBuilder identityApplicationUserQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("user", alias, identityApplicationUserQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public ClubQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class ClubSubscriptionQueryBuilder : GraphQlQueryBuilder<ClubSubscriptionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "club", IsComplex = true, QueryBuilderType = typeof(SubscriptionClubQueryBuilder) },
                new FieldMetadata { Name = "clubId" },
                new FieldMetadata { Name = "clubSubscriptionId" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "price" }
            };

        protected override string TypeName { get { return "ClubSubscription"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ClubSubscriptionQueryBuilder WithClub(SubscriptionClubQueryBuilder subscriptionClubQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("club", alias, subscriptionClubQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public ClubSubscriptionQueryBuilder ExceptClub()
        {
            return ExceptField("club");
        }

        public ClubSubscriptionQueryBuilder WithClubId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("clubId", alias, new GraphQlDirective[] { skip, include });
        }

        public ClubSubscriptionQueryBuilder ExceptClubId()
        {
            return ExceptField("clubId");
        }

        public ClubSubscriptionQueryBuilder WithClubSubscriptionId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("clubSubscriptionId", alias, new GraphQlDirective[] { skip, include });
        }

        public ClubSubscriptionQueryBuilder ExceptClubSubscriptionId()
        {
            return ExceptField("clubSubscriptionId");
        }

        public ClubSubscriptionQueryBuilder WithName(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { skip, include });
        }

        public ClubSubscriptionQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ClubSubscriptionQueryBuilder WithPrice(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("price", alias, new GraphQlDirective[] { skip, include });
        }

        public ClubSubscriptionQueryBuilder ExceptPrice()
        {
            return ExceptField("price");
        }
    }

    public class SubscriptionClubQueryBuilder : GraphQlQueryBuilder<SubscriptionClubQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "clubId" },
                new FieldMetadata { Name = "subscriptions", IsComplex = true, QueryBuilderType = typeof(ClubSubscriptionQueryBuilder) }
            };

        protected override string TypeName { get { return "subscription_Club"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SubscriptionClubQueryBuilder WithClubId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("clubId", alias, new GraphQlDirective[] { skip, include });
        }

        public SubscriptionClubQueryBuilder ExceptClubId()
        {
            return ExceptField("clubId");
        }

        public SubscriptionClubQueryBuilder WithSubscriptions(ClubSubscriptionQueryBuilder clubSubscriptionQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("subscriptions", alias, clubSubscriptionQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public SubscriptionClubQueryBuilder ExceptSubscriptions()
        {
            return ExceptField("subscriptions");
        }
    }

    public class ClubMemberQueryBuilder : GraphQlQueryBuilder<ClubMemberQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "clubId" },
                new FieldMetadata { Name = "clubSubscriptionId" },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(IdentityApplicationUserQueryBuilder) },
                new FieldMetadata { Name = "userId" }
            };

        protected override string TypeName { get { return "ClubMember"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ClubMemberQueryBuilder WithClubId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("clubId", alias, new GraphQlDirective[] { skip, include });
        }

        public ClubMemberQueryBuilder ExceptClubId()
        {
            return ExceptField("clubId");
        }

        public ClubMemberQueryBuilder WithClubSubscriptionId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("clubSubscriptionId", alias, new GraphQlDirective[] { skip, include });
        }

        public ClubMemberQueryBuilder ExceptClubSubscriptionId()
        {
            return ExceptField("clubSubscriptionId");
        }

        public ClubMemberQueryBuilder WithUser(IdentityApplicationUserQueryBuilder identityApplicationUserQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("user", alias, identityApplicationUserQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public ClubMemberQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }

        public ClubMemberQueryBuilder WithUserId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { skip, include });
        }

        public ClubMemberQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }
    }

    public class ClubmemberClubSubscriptionQueryBuilder : GraphQlQueryBuilder<ClubmemberClubSubscriptionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "clubId" },
                new FieldMetadata { Name = "clubMembers", IsComplex = true, QueryBuilderType = typeof(ClubMemberQueryBuilder) },
                new FieldMetadata { Name = "clubSubscriptionId" }
            };

        protected override string TypeName { get { return "clubmember_ClubSubscription"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ClubmemberClubSubscriptionQueryBuilder WithClubId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("clubId", alias, new GraphQlDirective[] { skip, include });
        }

        public ClubmemberClubSubscriptionQueryBuilder ExceptClubId()
        {
            return ExceptField("clubId");
        }

        public ClubmemberClubSubscriptionQueryBuilder WithClubMembers(ClubMemberQueryBuilder clubMemberQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("clubMembers", alias, clubMemberQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public ClubmemberClubSubscriptionQueryBuilder ExceptClubMembers()
        {
            return ExceptField("clubMembers");
        }

        public ClubmemberClubSubscriptionQueryBuilder WithClubSubscriptionId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("clubSubscriptionId", alias, new GraphQlDirective[] { skip, include });
        }

        public ClubmemberClubSubscriptionQueryBuilder ExceptClubSubscriptionId()
        {
            return ExceptField("clubSubscriptionId");
        }
    }

    public class RoomQueryBuilder : GraphQlQueryBuilder<RoomQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "bookings", IsComplex = true, QueryBuilderType = typeof(RoomBookingQueryBuilder) },
                new FieldMetadata { Name = "clubId" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "roomId" },
                new FieldMetadata { Name = "validate", IsComplex = true, QueryBuilderType = typeof(RoomValidationResultQueryBuilder) }
            };

        protected override string TypeName { get { return "Room"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public RoomQueryBuilder WithBookings(RoomBookingQueryBuilder roomBookingQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("bookings", alias, roomBookingQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public RoomQueryBuilder ExceptBookings()
        {
            return ExceptField("bookings");
        }

        public RoomQueryBuilder WithClubId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("clubId", alias, new GraphQlDirective[] { skip, include });
        }

        public RoomQueryBuilder ExceptClubId()
        {
            return ExceptField("clubId");
        }

        public RoomQueryBuilder WithName(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { skip, include });
        }

        public RoomQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public RoomQueryBuilder WithRoomId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("roomId", alias, new GraphQlDirective[] { skip, include });
        }

        public RoomQueryBuilder ExceptRoomId()
        {
            return ExceptField("roomId");
        }

        public RoomQueryBuilder WithValidate(RoomValidationResultQueryBuilder roomValidationResultQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("validate", alias, roomValidationResultQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public RoomQueryBuilder ExceptValidate()
        {
            return ExceptField("validate");
        }
    }

    public class RoomBookingQueryBuilder : GraphQlQueryBuilder<RoomBookingQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "endTime", IsComplex = true },
                new FieldMetadata { Name = "eventId" },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "roomId" },
                new FieldMetadata { Name = "startTime", IsComplex = true },
                new FieldMetadata { Name = "validate", IsComplex = true, QueryBuilderType = typeof(RoomValidationResultQueryBuilder) }
            };

        protected override string TypeName { get { return "room_Booking"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public RoomBookingQueryBuilder WithEndTime(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("endTime", alias, new GraphQlDirective[] { skip, include });
        }

        public RoomBookingQueryBuilder ExceptEndTime()
        {
            return ExceptField("endTime");
        }

        public RoomBookingQueryBuilder WithEventId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("eventId", alias, new GraphQlDirective[] { skip, include });
        }

        public RoomBookingQueryBuilder ExceptEventId()
        {
            return ExceptField("eventId");
        }

        public RoomBookingQueryBuilder WithName(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { skip, include });
        }

        public RoomBookingQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public RoomBookingQueryBuilder WithRoomId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("roomId", alias, new GraphQlDirective[] { skip, include });
        }

        public RoomBookingQueryBuilder ExceptRoomId()
        {
            return ExceptField("roomId");
        }

        public RoomBookingQueryBuilder WithStartTime(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("startTime", alias, new GraphQlDirective[] { skip, include });
        }

        public RoomBookingQueryBuilder ExceptStartTime()
        {
            return ExceptField("startTime");
        }

        public RoomBookingQueryBuilder WithValidate(RoomValidationResultQueryBuilder roomValidationResultQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("validate", alias, roomValidationResultQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public RoomBookingQueryBuilder ExceptValidate()
        {
            return ExceptField("validate");
        }
    }

    public class RoomClubQueryBuilder : GraphQlQueryBuilder<RoomClubQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "clubId" },
                new FieldMetadata { Name = "rooms", IsComplex = true, QueryBuilderType = typeof(RoomQueryBuilder) }
            };

        protected override string TypeName { get { return "room_Club"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public RoomClubQueryBuilder WithClubId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("clubId", alias, new GraphQlDirective[] { skip, include });
        }

        public RoomClubQueryBuilder ExceptClubId()
        {
            return ExceptField("clubId");
        }

        public RoomClubQueryBuilder WithRooms(RoomQueryBuilder roomQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("rooms", alias, roomQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public RoomClubQueryBuilder ExceptRooms()
        {
            return ExceptField("rooms");
        }
    }

    public class RoomValidationResultQueryBuilder : GraphQlQueryBuilder<RoomValidationResultQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "errorMessage" },
                new FieldMetadata { Name = "memberNames", IsComplex = true }
            };

        protected override string TypeName { get { return "room_ValidationResult"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public RoomValidationResultQueryBuilder WithErrorMessage(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("errorMessage", alias, new GraphQlDirective[] { skip, include });
        }

        public RoomValidationResultQueryBuilder ExceptErrorMessage()
        {
            return ExceptField("errorMessage");
        }

        public RoomValidationResultQueryBuilder WithMemberNames(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("memberNames", alias, new GraphQlDirective[] { skip, include });
        }

        public RoomValidationResultQueryBuilder ExceptMemberNames()
        {
            return ExceptField("memberNames");
        }
    }

    public class EventQueryBuilder : GraphQlQueryBuilder<EventQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "club", IsComplex = true, QueryBuilderType = typeof(ClubQueryBuilder) },
                new FieldMetadata { Name = "clubId" },
                new FieldMetadata { Name = "description" },
                new FieldMetadata { Name = "endTime", IsComplex = true },
                new FieldMetadata { Name = "eventId" },
                new FieldMetadata { Name = "eventPrices", IsComplex = true, QueryBuilderType = typeof(EventPriceQueryBuilder) },
                new FieldMetadata { Name = "instructorForEvents", IsComplex = true, QueryBuilderType = typeof(InstructorForEventQueryBuilder) },
                new FieldMetadata { Name = "locations", IsComplex = true, QueryBuilderType = typeof(RoomEventQueryBuilder) },
                new FieldMetadata { Name = "name" },
                new FieldMetadata { Name = "publicPrice" },
                new FieldMetadata { Name = "startTime", IsComplex = true },
                new FieldMetadata { Name = "status" },
                new FieldMetadata { Name = "userPrice" },
                new FieldMetadata { Name = "validate", IsComplex = true, QueryBuilderType = typeof(EventValidationResultQueryBuilder) }
            };

        protected override string TypeName { get { return "Event"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public EventQueryBuilder WithClub(ClubQueryBuilder clubQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("club", alias, clubQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public EventQueryBuilder ExceptClub()
        {
            return ExceptField("club");
        }

        public EventQueryBuilder WithClubId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("clubId", alias, new GraphQlDirective[] { skip, include });
        }

        public EventQueryBuilder ExceptClubId()
        {
            return ExceptField("clubId");
        }

        public EventQueryBuilder WithDescription(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { skip, include });
        }

        public EventQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public EventQueryBuilder WithEndTime(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("endTime", alias, new GraphQlDirective[] { skip, include });
        }

        public EventQueryBuilder ExceptEndTime()
        {
            return ExceptField("endTime");
        }

        public EventQueryBuilder WithEventId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("eventId", alias, new GraphQlDirective[] { skip, include });
        }

        public EventQueryBuilder ExceptEventId()
        {
            return ExceptField("eventId");
        }

        public EventQueryBuilder WithEventPrices(EventPriceQueryBuilder eventPriceQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("eventPrices", alias, eventPriceQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public EventQueryBuilder ExceptEventPrices()
        {
            return ExceptField("eventPrices");
        }

        public EventQueryBuilder WithInstructorForEvents(InstructorForEventQueryBuilder instructorForEventQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("instructorForEvents", alias, instructorForEventQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public EventQueryBuilder ExceptInstructorForEvents()
        {
            return ExceptField("instructorForEvents");
        }

        public EventQueryBuilder WithLocations(RoomEventQueryBuilder roomEventQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("locations", alias, roomEventQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public EventQueryBuilder ExceptLocations()
        {
            return ExceptField("locations");
        }

        public EventQueryBuilder WithName(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { skip, include });
        }

        public EventQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public EventQueryBuilder WithPublicPrice(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("publicPrice", alias, new GraphQlDirective[] { skip, include });
        }

        public EventQueryBuilder ExceptPublicPrice()
        {
            return ExceptField("publicPrice");
        }

        public EventQueryBuilder WithStartTime(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("startTime", alias, new GraphQlDirective[] { skip, include });
        }

        public EventQueryBuilder ExceptStartTime()
        {
            return ExceptField("startTime");
        }

        public EventQueryBuilder WithStatus(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("status", alias, new GraphQlDirective[] { skip, include });
        }

        public EventQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }

        public EventQueryBuilder WithUserPrice(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("userPrice", alias, new GraphQlDirective[] { skip, include });
        }

        public EventQueryBuilder ExceptUserPrice()
        {
            return ExceptField("userPrice");
        }

        public EventQueryBuilder WithValidate(EventValidationResultQueryBuilder eventValidationResultQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("validate", alias, eventValidationResultQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public EventQueryBuilder ExceptValidate()
        {
            return ExceptField("validate");
        }
    }

    public class EventValidationResultQueryBuilder : GraphQlQueryBuilder<EventValidationResultQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "errorMessage" },
                new FieldMetadata { Name = "memberNames", IsComplex = true }
            };

        protected override string TypeName { get { return "event_ValidationResult"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public EventValidationResultQueryBuilder WithErrorMessage(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("errorMessage", alias, new GraphQlDirective[] { skip, include });
        }

        public EventValidationResultQueryBuilder ExceptErrorMessage()
        {
            return ExceptField("errorMessage");
        }

        public EventValidationResultQueryBuilder WithMemberNames(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("memberNames", alias, new GraphQlDirective[] { skip, include });
        }

        public EventValidationResultQueryBuilder ExceptMemberNames()
        {
            return ExceptField("memberNames");
        }
    }

    public class EventPriceQueryBuilder : GraphQlQueryBuilder<EventPriceQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "clubSubscription", IsComplex = true, QueryBuilderType = typeof(EventClubSubscriptionQueryBuilder) },
                new FieldMetadata { Name = "clubSubscriptionId" },
                new FieldMetadata { Name = "event", IsComplex = true, QueryBuilderType = typeof(EventQueryBuilder) },
                new FieldMetadata { Name = "eventId" },
                new FieldMetadata { Name = "price" },
                new FieldMetadata { Name = "validate", IsComplex = true, QueryBuilderType = typeof(EventValidationResultQueryBuilder) }
            };

        protected override string TypeName { get { return "EventPrice"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public EventPriceQueryBuilder WithClubSubscription(EventClubSubscriptionQueryBuilder eventClubSubscriptionQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("clubSubscription", alias, eventClubSubscriptionQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public EventPriceQueryBuilder ExceptClubSubscription()
        {
            return ExceptField("clubSubscription");
        }

        public EventPriceQueryBuilder WithClubSubscriptionId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("clubSubscriptionId", alias, new GraphQlDirective[] { skip, include });
        }

        public EventPriceQueryBuilder ExceptClubSubscriptionId()
        {
            return ExceptField("clubSubscriptionId");
        }

        public EventPriceQueryBuilder WithEvent(EventQueryBuilder eventQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("event", alias, eventQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public EventPriceQueryBuilder ExceptEvent()
        {
            return ExceptField("event");
        }

        public EventPriceQueryBuilder WithEventId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("eventId", alias, new GraphQlDirective[] { skip, include });
        }

        public EventPriceQueryBuilder ExceptEventId()
        {
            return ExceptField("eventId");
        }

        public EventPriceQueryBuilder WithPrice(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("price", alias, new GraphQlDirective[] { skip, include });
        }

        public EventPriceQueryBuilder ExceptPrice()
        {
            return ExceptField("price");
        }

        public EventPriceQueryBuilder WithValidate(EventValidationResultQueryBuilder eventValidationResultQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("validate", alias, eventValidationResultQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public EventPriceQueryBuilder ExceptValidate()
        {
            return ExceptField("validate");
        }
    }

    public class RoomEventQueryBuilder : GraphQlQueryBuilder<RoomEventQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "event", IsComplex = true, QueryBuilderType = typeof(EventQueryBuilder) },
                new FieldMetadata { Name = "eventId" },
                new FieldMetadata { Name = "room", IsComplex = true, QueryBuilderType = typeof(RoomQueryBuilder) },
                new FieldMetadata { Name = "roomId" }
            };

        protected override string TypeName { get { return "RoomEvent"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public RoomEventQueryBuilder WithEvent(EventQueryBuilder eventQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("event", alias, eventQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public RoomEventQueryBuilder ExceptEvent()
        {
            return ExceptField("event");
        }

        public RoomEventQueryBuilder WithEventId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("eventId", alias, new GraphQlDirective[] { skip, include });
        }

        public RoomEventQueryBuilder ExceptEventId()
        {
            return ExceptField("eventId");
        }

        public RoomEventQueryBuilder WithRoom(RoomQueryBuilder roomQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("room", alias, roomQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public RoomEventQueryBuilder ExceptRoom()
        {
            return ExceptField("room");
        }

        public RoomEventQueryBuilder WithRoomId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("roomId", alias, new GraphQlDirective[] { skip, include });
        }

        public RoomEventQueryBuilder ExceptRoomId()
        {
            return ExceptField("roomId");
        }
    }

    public class InstructorForEventQueryBuilder : GraphQlQueryBuilder<InstructorForEventQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "event", IsComplex = true, QueryBuilderType = typeof(EventQueryBuilder) },
                new FieldMetadata { Name = "eventId" },
                new FieldMetadata { Name = "instructor", IsComplex = true, QueryBuilderType = typeof(EventInstructorQueryBuilder) },
                new FieldMetadata { Name = "instructorId" },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(IdentityApplicationUserQueryBuilder) }
            };

        protected override string TypeName { get { return "InstructorForEvent"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public InstructorForEventQueryBuilder WithEvent(EventQueryBuilder eventQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("event", alias, eventQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public InstructorForEventQueryBuilder ExceptEvent()
        {
            return ExceptField("event");
        }

        public InstructorForEventQueryBuilder WithEventId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("eventId", alias, new GraphQlDirective[] { skip, include });
        }

        public InstructorForEventQueryBuilder ExceptEventId()
        {
            return ExceptField("eventId");
        }

        public InstructorForEventQueryBuilder WithInstructor(EventInstructorQueryBuilder eventInstructorQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("instructor", alias, eventInstructorQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public InstructorForEventQueryBuilder ExceptInstructor()
        {
            return ExceptField("instructor");
        }

        public InstructorForEventQueryBuilder WithInstructorId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("instructorId", alias, new GraphQlDirective[] { skip, include });
        }

        public InstructorForEventQueryBuilder ExceptInstructorId()
        {
            return ExceptField("instructorId");
        }

        public InstructorForEventQueryBuilder WithUser(IdentityApplicationUserQueryBuilder identityApplicationUserQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("user", alias, identityApplicationUserQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public InstructorForEventQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public class EventClubSubscriptionQueryBuilder : GraphQlQueryBuilder<EventClubSubscriptionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "clubId" },
                new FieldMetadata { Name = "clubSubscriptionId" },
                new FieldMetadata { Name = "eventPrices", IsComplex = true, QueryBuilderType = typeof(EventPriceQueryBuilder) }
            };

        protected override string TypeName { get { return "event_ClubSubscription"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public EventClubSubscriptionQueryBuilder WithClubId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("clubId", alias, new GraphQlDirective[] { skip, include });
        }

        public EventClubSubscriptionQueryBuilder ExceptClubId()
        {
            return ExceptField("clubId");
        }

        public EventClubSubscriptionQueryBuilder WithClubSubscriptionId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("clubSubscriptionId", alias, new GraphQlDirective[] { skip, include });
        }

        public EventClubSubscriptionQueryBuilder ExceptClubSubscriptionId()
        {
            return ExceptField("clubSubscriptionId");
        }

        public EventClubSubscriptionQueryBuilder WithEventPrices(EventPriceQueryBuilder eventPriceQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("eventPrices", alias, eventPriceQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public EventClubSubscriptionQueryBuilder ExceptEventPrices()
        {
            return ExceptField("eventPrices");
        }
    }

    public class EventRoomQueryBuilder : GraphQlQueryBuilder<EventRoomQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "clubId" },
                new FieldMetadata { Name = "locations", IsComplex = true, QueryBuilderType = typeof(RoomEventQueryBuilder) },
                new FieldMetadata { Name = "roomId" }
            };

        protected override string TypeName { get { return "event_Room"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public EventRoomQueryBuilder WithClubId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("clubId", alias, new GraphQlDirective[] { skip, include });
        }

        public EventRoomQueryBuilder ExceptClubId()
        {
            return ExceptField("clubId");
        }

        public EventRoomQueryBuilder WithLocations(RoomEventQueryBuilder roomEventQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("locations", alias, roomEventQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public EventRoomQueryBuilder ExceptLocations()
        {
            return ExceptField("locations");
        }

        public EventRoomQueryBuilder WithRoomId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("roomId", alias, new GraphQlDirective[] { skip, include });
        }

        public EventRoomQueryBuilder ExceptRoomId()
        {
            return ExceptField("roomId");
        }
    }

    public class EventInstructorQueryBuilder : GraphQlQueryBuilder<EventInstructorQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "clubId" },
                new FieldMetadata { Name = "instructorForEvents", IsComplex = true, QueryBuilderType = typeof(InstructorForEventQueryBuilder) },
                new FieldMetadata { Name = "instructorId" }
            };

        protected override string TypeName { get { return "event_Instructor"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public EventInstructorQueryBuilder WithClubId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("clubId", alias, new GraphQlDirective[] { skip, include });
        }

        public EventInstructorQueryBuilder ExceptClubId()
        {
            return ExceptField("clubId");
        }

        public EventInstructorQueryBuilder WithInstructorForEvents(InstructorForEventQueryBuilder instructorForEventQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("instructorForEvents", alias, instructorForEventQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public EventInstructorQueryBuilder ExceptInstructorForEvents()
        {
            return ExceptField("instructorForEvents");
        }

        public EventInstructorQueryBuilder WithInstructorId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("instructorId", alias, new GraphQlDirective[] { skip, include });
        }

        public EventInstructorQueryBuilder ExceptInstructorId()
        {
            return ExceptField("instructorId");
        }
    }

    public class EventParticipantQueryBuilder : GraphQlQueryBuilder<EventParticipantQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "event", IsComplex = true, QueryBuilderType = typeof(EventparticipantEventQueryBuilder) },
                new FieldMetadata { Name = "eventId" },
                new FieldMetadata { Name = "eventParticipantId" },
                new FieldMetadata { Name = "userId" }
            };

        protected override string TypeName { get { return "EventParticipant"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public EventParticipantQueryBuilder WithEvent(EventparticipantEventQueryBuilder eventparticipantEventQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("event", alias, eventparticipantEventQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public EventParticipantQueryBuilder ExceptEvent()
        {
            return ExceptField("event");
        }

        public EventParticipantQueryBuilder WithEventId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("eventId", alias, new GraphQlDirective[] { skip, include });
        }

        public EventParticipantQueryBuilder ExceptEventId()
        {
            return ExceptField("eventId");
        }

        public EventParticipantQueryBuilder WithEventParticipantId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("eventParticipantId", alias, new GraphQlDirective[] { skip, include });
        }

        public EventParticipantQueryBuilder ExceptEventParticipantId()
        {
            return ExceptField("eventParticipantId");
        }

        public EventParticipantQueryBuilder WithUserId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { skip, include });
        }

        public EventParticipantQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }
    }

    public class EventparticipantEventQueryBuilder : GraphQlQueryBuilder<EventparticipantEventQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "clubId" },
                new FieldMetadata { Name = "eventId" },
                new FieldMetadata { Name = "eventParticipants", IsComplex = true, QueryBuilderType = typeof(EventParticipantQueryBuilder) },
                new FieldMetadata { Name = "eventPrices", IsComplex = true, QueryBuilderType = typeof(EventparticipantEventPriceQueryBuilder) },
                new FieldMetadata { Name = "publicPrice" }
            };

        protected override string TypeName { get { return "eventparticipant_Event"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public EventparticipantEventQueryBuilder WithClubId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("clubId", alias, new GraphQlDirective[] { skip, include });
        }

        public EventparticipantEventQueryBuilder ExceptClubId()
        {
            return ExceptField("clubId");
        }

        public EventparticipantEventQueryBuilder WithEventId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("eventId", alias, new GraphQlDirective[] { skip, include });
        }

        public EventparticipantEventQueryBuilder ExceptEventId()
        {
            return ExceptField("eventId");
        }

        public EventparticipantEventQueryBuilder WithEventParticipants(EventParticipantQueryBuilder eventParticipantQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("eventParticipants", alias, eventParticipantQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public EventparticipantEventQueryBuilder ExceptEventParticipants()
        {
            return ExceptField("eventParticipants");
        }

        public EventparticipantEventQueryBuilder WithEventPrices(EventparticipantEventPriceQueryBuilder eventparticipantEventPriceQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("eventPrices", alias, eventparticipantEventPriceQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public EventparticipantEventQueryBuilder ExceptEventPrices()
        {
            return ExceptField("eventPrices");
        }

        public EventparticipantEventQueryBuilder WithPublicPrice(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("publicPrice", alias, new GraphQlDirective[] { skip, include });
        }

        public EventparticipantEventQueryBuilder ExceptPublicPrice()
        {
            return ExceptField("publicPrice");
        }
    }

    public class EventparticipantEventPriceQueryBuilder : GraphQlQueryBuilder<EventparticipantEventPriceQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "clubSubscriptionId" },
                new FieldMetadata { Name = "event", IsComplex = true, QueryBuilderType = typeof(EventparticipantEventQueryBuilder) },
                new FieldMetadata { Name = "eventId" },
                new FieldMetadata { Name = "price" }
            };

        protected override string TypeName { get { return "eventparticipant_EventPrice"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public EventparticipantEventPriceQueryBuilder WithClubSubscriptionId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("clubSubscriptionId", alias, new GraphQlDirective[] { skip, include });
        }

        public EventparticipantEventPriceQueryBuilder ExceptClubSubscriptionId()
        {
            return ExceptField("clubSubscriptionId");
        }

        public EventparticipantEventPriceQueryBuilder WithEvent(EventparticipantEventQueryBuilder eventparticipantEventQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("event", alias, eventparticipantEventQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public EventparticipantEventPriceQueryBuilder ExceptEvent()
        {
            return ExceptField("event");
        }

        public EventparticipantEventPriceQueryBuilder WithEventId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("eventId", alias, new GraphQlDirective[] { skip, include });
        }

        public EventparticipantEventPriceQueryBuilder ExceptEventId()
        {
            return ExceptField("eventId");
        }

        public EventparticipantEventPriceQueryBuilder WithPrice(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("price", alias, new GraphQlDirective[] { skip, include });
        }

        public EventparticipantEventPriceQueryBuilder ExceptPrice()
        {
            return ExceptField("price");
        }
    }

    public class PermissionRoleQueryBuilder : GraphQlQueryBuilder<PermissionRoleQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "club", IsComplex = true, QueryBuilderType = typeof(ClubQueryBuilder) },
                new FieldMetadata { Name = "clubId" },
                new FieldMetadata { Name = "clubSubscription", IsComplex = true, QueryBuilderType = typeof(ClubSubscriptionQueryBuilder) },
                new FieldMetadata { Name = "clubSubscriptionId" },
                new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(IdentityApplicationUserQueryBuilder) },
                new FieldMetadata { Name = "userId" },
                new FieldMetadata { Name = "userRole" }
            };

        protected override string TypeName { get { return "permission_Role"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PermissionRoleQueryBuilder WithClub(ClubQueryBuilder clubQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("club", alias, clubQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public PermissionRoleQueryBuilder ExceptClub()
        {
            return ExceptField("club");
        }

        public PermissionRoleQueryBuilder WithClubId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("clubId", alias, new GraphQlDirective[] { skip, include });
        }

        public PermissionRoleQueryBuilder ExceptClubId()
        {
            return ExceptField("clubId");
        }

        public PermissionRoleQueryBuilder WithClubSubscription(ClubSubscriptionQueryBuilder clubSubscriptionQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("clubSubscription", alias, clubSubscriptionQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public PermissionRoleQueryBuilder ExceptClubSubscription()
        {
            return ExceptField("clubSubscription");
        }

        public PermissionRoleQueryBuilder WithClubSubscriptionId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("clubSubscriptionId", alias, new GraphQlDirective[] { skip, include });
        }

        public PermissionRoleQueryBuilder ExceptClubSubscriptionId()
        {
            return ExceptField("clubSubscriptionId");
        }

        public PermissionRoleQueryBuilder WithUser(IdentityApplicationUserQueryBuilder identityApplicationUserQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("user", alias, identityApplicationUserQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public PermissionRoleQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }

        public PermissionRoleQueryBuilder WithUserId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { skip, include });
        }

        public PermissionRoleQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }

        public PermissionRoleQueryBuilder WithUserRole(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("userRole", alias, new GraphQlDirective[] { skip, include });
        }

        public PermissionRoleQueryBuilder ExceptUserRole()
        {
            return ExceptField("userRole");
        }
    }

    public class PermissionUserQueryBuilder : GraphQlQueryBuilder<PermissionUserQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "roles", IsComplex = true, QueryBuilderType = typeof(PermissionRoleQueryBuilder) },
                new FieldMetadata { Name = "userId" }
            };

        protected override string TypeName { get { return "permission_User"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PermissionUserQueryBuilder WithRoles(PermissionRoleQueryBuilder permissionRoleQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("roles", alias, permissionRoleQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public PermissionUserQueryBuilder ExceptRoles()
        {
            return ExceptField("roles");
        }

        public PermissionUserQueryBuilder WithUserId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { skip, include });
        }

        public PermissionUserQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }
    }

    public class PermissionClubQueryBuilder : GraphQlQueryBuilder<PermissionClubQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "clubId" },
                new FieldMetadata { Name = "users", IsComplex = true, QueryBuilderType = typeof(PermissionRoleQueryBuilder) }
            };

        protected override string TypeName { get { return "permission_Club"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PermissionClubQueryBuilder WithClubId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("clubId", alias, new GraphQlDirective[] { skip, include });
        }

        public PermissionClubQueryBuilder ExceptClubId()
        {
            return ExceptField("clubId");
        }

        public PermissionClubQueryBuilder WithUsers(PermissionRoleQueryBuilder permissionRoleQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithObjectField("users", alias, permissionRoleQueryBuilder, new GraphQlDirective[] { skip, include });
        }

        public PermissionClubQueryBuilder ExceptUsers()
        {
            return ExceptField("users");
        }
    }

    public class EventVerificationQueryBuilder : GraphQlQueryBuilder<EventVerificationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
            new []
            {
                new FieldMetadata { Name = "code" },
                new FieldMetadata { Name = "eventId" },
                new FieldMetadata { Name = "eventVerificationId" },
                new FieldMetadata { Name = "status" },
                new FieldMetadata { Name = "userId" }
            };

        protected override string TypeName { get { return "EventVerification"; } } 

        public override IReadOnlyList<FieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public EventVerificationQueryBuilder WithCode(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("code", alias, new GraphQlDirective[] { skip, include });
        }

        public EventVerificationQueryBuilder ExceptCode()
        {
            return ExceptField("code");
        }

        public EventVerificationQueryBuilder WithEventId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("eventId", alias, new GraphQlDirective[] { skip, include });
        }

        public EventVerificationQueryBuilder ExceptEventId()
        {
            return ExceptField("eventId");
        }

        public EventVerificationQueryBuilder WithEventVerificationId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("eventVerificationId", alias, new GraphQlDirective[] { skip, include });
        }

        public EventVerificationQueryBuilder ExceptEventVerificationId()
        {
            return ExceptField("eventVerificationId");
        }

        public EventVerificationQueryBuilder WithStatus(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("status", alias, new GraphQlDirective[] { skip, include });
        }

        public EventVerificationQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }

        public EventVerificationQueryBuilder WithUserId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
        {
            return WithScalarField("userId", alias, new GraphQlDirective[] { skip, include });
        }

        public EventVerificationQueryBuilder ExceptUserId()
        {
            return ExceptField("userId");
        }
    }
    #endregion

    #region input classes
    public class LoginUserRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _email;
        private InputPropertyInfo _password;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Email
        {
            get { return (QueryBuilderParameter<string>)_email.Value; }
            set { _email = new InputPropertyInfo { Name = "email", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Password
        {
            get { return (QueryBuilderParameter<string>)_password.Value; }
            set { _password = new InputPropertyInfo { Name = "password", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_email.Name != null) yield return _email;
            if (_password.Name != null) yield return _password;
        }
    }

    public class CreateUserRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _birthDate;
        private InputPropertyInfo _email;
        private InputPropertyInfo _name;
        private InputPropertyInfo _password;
        private InputPropertyInfo _phoneNumber;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> BirthDate
        {
            get { return (QueryBuilderParameter<object>)_birthDate.Value; }
            set { _birthDate = new InputPropertyInfo { Name = "birthDate", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Email
        {
            get { return (QueryBuilderParameter<string>)_email.Value; }
            set { _email = new InputPropertyInfo { Name = "email", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Password
        {
            get { return (QueryBuilderParameter<string>)_password.Value; }
            set { _password = new InputPropertyInfo { Name = "password", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> PhoneNumber
        {
            get { return (QueryBuilderParameter<string>)_phoneNumber.Value; }
            set { _phoneNumber = new InputPropertyInfo { Name = "phoneNumber", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_birthDate.Name != null) yield return _birthDate;
            if (_email.Name != null) yield return _email;
            if (_name.Name != null) yield return _name;
            if (_password.Name != null) yield return _password;
            if (_phoneNumber.Name != null) yield return _phoneNumber;
        }
    }

    public class EditUserRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _phoneNumber;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> PhoneNumber
        {
            get { return (QueryBuilderParameter<string>)_phoneNumber.Value; }
            set { _phoneNumber = new InputPropertyInfo { Name = "phoneNumber", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_phoneNumber.Name != null) yield return _phoneNumber;
        }
    }

    public class UpdateClubRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _accountNumber;
        private InputPropertyInfo _address;
        private InputPropertyInfo _description;
        private InputPropertyInfo _name;
        private InputPropertyInfo _phoneNumber;
        private InputPropertyInfo _registrationNumber;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> AccountNumber
        {
            get { return (QueryBuilderParameter<string>)_accountNumber.Value; }
            set { _accountNumber = new InputPropertyInfo { Name = "accountNumber", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Address
        {
            get { return (QueryBuilderParameter<string>)_address.Value; }
            set { _address = new InputPropertyInfo { Name = "address", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Description
        {
            get { return (QueryBuilderParameter<string>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "description", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> PhoneNumber
        {
            get { return (QueryBuilderParameter<string>)_phoneNumber.Value; }
            set { _phoneNumber = new InputPropertyInfo { Name = "phoneNumber", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> RegistrationNumber
        {
            get { return (QueryBuilderParameter<string>)_registrationNumber.Value; }
            set { _registrationNumber = new InputPropertyInfo { Name = "registrationNumber", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_accountNumber.Name != null) yield return _accountNumber;
            if (_address.Name != null) yield return _address;
            if (_description.Name != null) yield return _description;
            if (_name.Name != null) yield return _name;
            if (_phoneNumber.Name != null) yield return _phoneNumber;
            if (_registrationNumber.Name != null) yield return _registrationNumber;
        }
    }

    public class CreateClubRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _accountNumber;
        private InputPropertyInfo _address;
        private InputPropertyInfo _description;
        private InputPropertyInfo _locations;
        private InputPropertyInfo _name;
        private InputPropertyInfo _phoneNumber;
        private InputPropertyInfo _registrationNumber;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> AccountNumber
        {
            get { return (QueryBuilderParameter<string>)_accountNumber.Value; }
            set { _accountNumber = new InputPropertyInfo { Name = "accountNumber", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Address
        {
            get { return (QueryBuilderParameter<string>)_address.Value; }
            set { _address = new InputPropertyInfo { Name = "address", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Description
        {
            get { return (QueryBuilderParameter<string>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "description", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> Locations
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_locations.Value; }
            set { _locations = new InputPropertyInfo { Name = "locations", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> PhoneNumber
        {
            get { return (QueryBuilderParameter<string>)_phoneNumber.Value; }
            set { _phoneNumber = new InputPropertyInfo { Name = "phoneNumber", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> RegistrationNumber
        {
            get { return (QueryBuilderParameter<string>)_registrationNumber.Value; }
            set { _registrationNumber = new InputPropertyInfo { Name = "registrationNumber", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_accountNumber.Name != null) yield return _accountNumber;
            if (_address.Name != null) yield return _address;
            if (_description.Name != null) yield return _description;
            if (_locations.Name != null) yield return _locations;
            if (_name.Name != null) yield return _name;
            if (_phoneNumber.Name != null) yield return _phoneNumber;
            if (_registrationNumber.Name != null) yield return _registrationNumber;
        }
    }

    public class CreateClubSubscriptionRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clubId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _price;
        private InputPropertyInfo _referenceId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClubId
        {
            get { return (QueryBuilderParameter<string>)_clubId.Value; }
            set { _clubId = new InputPropertyInfo { Name = "clubId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Price
        {
            get { return (QueryBuilderParameter<int?>)_price.Value; }
            set { _price = new InputPropertyInfo { Name = "price", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ReferenceId
        {
            get { return (QueryBuilderParameter<string>)_referenceId.Value; }
            set { _referenceId = new InputPropertyInfo { Name = "referenceId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clubId.Name != null) yield return _clubId;
            if (_name.Name != null) yield return _name;
            if (_price.Name != null) yield return _price;
            if (_referenceId.Name != null) yield return _referenceId;
        }
    }

    public class UpdateClubSubscriptionRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _price;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Price
        {
            get { return (QueryBuilderParameter<int?>)_price.Value; }
            set { _price = new InputPropertyInfo { Name = "price", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_price.Name != null) yield return _price;
        }
    }

    public class UpdateClubMemberRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clubId;
        private InputPropertyInfo _clubSubscriptionId;
        private InputPropertyInfo _userId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClubId
        {
            get { return (QueryBuilderParameter<string>)_clubId.Value; }
            set { _clubId = new InputPropertyInfo { Name = "clubId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClubSubscriptionId
        {
            get { return (QueryBuilderParameter<string>)_clubSubscriptionId.Value; }
            set { _clubSubscriptionId = new InputPropertyInfo { Name = "clubSubscriptionId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> UserId
        {
            get { return (QueryBuilderParameter<string>)_userId.Value; }
            set { _userId = new InputPropertyInfo { Name = "userId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clubId.Name != null) yield return _clubId;
            if (_clubSubscriptionId.Name != null) yield return _clubSubscriptionId;
            if (_userId.Name != null) yield return _userId;
        }
    }

    public class CreateClubMemberRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clubSubscriptionId;
        private InputPropertyInfo _userId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClubSubscriptionId
        {
            get { return (QueryBuilderParameter<string>)_clubSubscriptionId.Value; }
            set { _clubSubscriptionId = new InputPropertyInfo { Name = "clubSubscriptionId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> UserId
        {
            get { return (QueryBuilderParameter<string>)_userId.Value; }
            set { _userId = new InputPropertyInfo { Name = "userId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clubSubscriptionId.Name != null) yield return _clubSubscriptionId;
            if (_userId.Name != null) yield return _userId;
        }
    }

    public class UpdateRoomRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
        }
    }

    public class CreateRoomRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clubId;
        private InputPropertyInfo _name;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClubId
        {
            get { return (QueryBuilderParameter<string>)_clubId.Value; }
            set { _clubId = new InputPropertyInfo { Name = "clubId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clubId.Name != null) yield return _clubId;
            if (_name.Name != null) yield return _name;
        }
    }

    public class UpdateEventRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _description;
        private InputPropertyInfo _endTime;
        private InputPropertyInfo _eventPrices;
        private InputPropertyInfo _instructorForEvents;
        private InputPropertyInfo _locations;
        private InputPropertyInfo _name;
        private InputPropertyInfo _publicPrice;
        private InputPropertyInfo _startTime;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Description
        {
            get { return (QueryBuilderParameter<string>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "description", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> EndTime
        {
            get { return (QueryBuilderParameter<object>)_endTime.Value; }
            set { _endTime = new InputPropertyInfo { Name = "endTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<EventPriceRequestInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<EventPriceRequestInput>> EventPrices
        {
            get { return (QueryBuilderParameter<ICollection<EventPriceRequestInput>>)_eventPrices.Value; }
            set { _eventPrices = new InputPropertyInfo { Name = "eventPrices", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> InstructorForEvents
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_instructorForEvents.Value; }
            set { _instructorForEvents = new InputPropertyInfo { Name = "instructorForEvents", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> Locations
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_locations.Value; }
            set { _locations = new InputPropertyInfo { Name = "locations", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> PublicPrice
        {
            get { return (QueryBuilderParameter<decimal?>)_publicPrice.Value; }
            set { _publicPrice = new InputPropertyInfo { Name = "publicPrice", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> StartTime
        {
            get { return (QueryBuilderParameter<object>)_startTime.Value; }
            set { _startTime = new InputPropertyInfo { Name = "startTime", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_description.Name != null) yield return _description;
            if (_endTime.Name != null) yield return _endTime;
            if (_eventPrices.Name != null) yield return _eventPrices;
            if (_instructorForEvents.Name != null) yield return _instructorForEvents;
            if (_locations.Name != null) yield return _locations;
            if (_name.Name != null) yield return _name;
            if (_publicPrice.Name != null) yield return _publicPrice;
            if (_startTime.Name != null) yield return _startTime;
        }
    }

    public class CreateEventRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clubId;
        private InputPropertyInfo _description;
        private InputPropertyInfo _endTime;
        private InputPropertyInfo _eventPrices;
        private InputPropertyInfo _instructorForEvents;
        private InputPropertyInfo _locations;
        private InputPropertyInfo _name;
        private InputPropertyInfo _publicPrice;
        private InputPropertyInfo _startTime;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClubId
        {
            get { return (QueryBuilderParameter<string>)_clubId.Value; }
            set { _clubId = new InputPropertyInfo { Name = "clubId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Description
        {
            get { return (QueryBuilderParameter<string>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "description", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> EndTime
        {
            get { return (QueryBuilderParameter<object>)_endTime.Value; }
            set { _endTime = new InputPropertyInfo { Name = "endTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<EventPriceRequestInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<EventPriceRequestInput>> EventPrices
        {
            get { return (QueryBuilderParameter<ICollection<EventPriceRequestInput>>)_eventPrices.Value; }
            set { _eventPrices = new InputPropertyInfo { Name = "eventPrices", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> InstructorForEvents
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_instructorForEvents.Value; }
            set { _instructorForEvents = new InputPropertyInfo { Name = "instructorForEvents", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> Locations
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_locations.Value; }
            set { _locations = new InputPropertyInfo { Name = "locations", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> PublicPrice
        {
            get { return (QueryBuilderParameter<decimal?>)_publicPrice.Value; }
            set { _publicPrice = new InputPropertyInfo { Name = "publicPrice", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> StartTime
        {
            get { return (QueryBuilderParameter<object>)_startTime.Value; }
            set { _startTime = new InputPropertyInfo { Name = "startTime", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clubId.Name != null) yield return _clubId;
            if (_description.Name != null) yield return _description;
            if (_endTime.Name != null) yield return _endTime;
            if (_eventPrices.Name != null) yield return _eventPrices;
            if (_instructorForEvents.Name != null) yield return _instructorForEvents;
            if (_locations.Name != null) yield return _locations;
            if (_name.Name != null) yield return _name;
            if (_publicPrice.Name != null) yield return _publicPrice;
            if (_startTime.Name != null) yield return _startTime;
        }
    }

    public class EventPriceRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clubSubscriptionId;
        private InputPropertyInfo _price;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ClubSubscriptionId
        {
            get { return (QueryBuilderParameter<string>)_clubSubscriptionId.Value; }
            set { _clubSubscriptionId = new InputPropertyInfo { Name = "clubSubscriptionId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> Price
        {
            get { return (QueryBuilderParameter<decimal?>)_price.Value; }
            set { _price = new InputPropertyInfo { Name = "price", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clubSubscriptionId.Name != null) yield return _clubSubscriptionId;
            if (_price.Name != null) yield return _price;
        }
    }

    public class VerifyCodeRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _code;
        private InputPropertyInfo _eventId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Code
        {
            get { return (QueryBuilderParameter<string>)_code.Value; }
            set { _code = new InputPropertyInfo { Name = "code", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> EventId
        {
            get { return (QueryBuilderParameter<string>)_eventId.Value; }
            set { _eventId = new InputPropertyInfo { Name = "eventId", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_code.Name != null) yield return _code;
            if (_eventId.Name != null) yield return _eventId;
        }
    }
    #endregion

    #region data classes
    public class Query
    {
        public ICollection<RoomBooking> Bookings { get; set; }
        public ICollection<RoomBooking> BookingsForClub { get; set; }
        public Club ClubById { get; set; }
        public Club ClubByName { get; set; }
        public ICollection<ClubmemberClubSubscription> ClubmemberapiClubSubscriptions { get; set; }
        public ICollection<ClubMember> ClubMembers { get; set; }
        public ICollection<Club> Clubs { get; set; }
        public ClubSubscription ClubSubscriptionById { get; set; }
        public ICollection<ClubSubscription> ClubSubscriptions { get; set; }
        public IdentityApplicationUser CurrentUser { get; set; }
        public ICollection<EventParticipant> EventParticipants { get; set; }
        public ICollection<Event> Events { get; set; }
        public ICollection<Event> EventsConfirmed { get; set; }
        public ICollection<Event> EventsForClub { get; set; }
        public ICollection<EventVerification> EventsForUser { get; set; }
        public ICollection<EventVerification> EventVerifications { get; set; }
        public Event GetEvent { get; set; }
        public ICollection<PermissionRole> InstructorInClub { get; set; }
        public ICollection<ClubMember> MembersForClub { get; set; }
        public ICollection<Club> MyClubs { get; set; }
        public ICollection<PermissionUser> Permissions { get; set; }
        public ICollection<PermissionRole> PermissionsInClub { get; set; }
        public ICollection<PermissionRole> RolesForUserId { get; set; }
        public ICollection<RoomClub> RoomapiClubs { get; set; }
        public Room RoomById { get; set; }
        public ICollection<Room> Rooms { get; set; }
        public ICollection<Room> RoomsForClub { get; set; }
        public ICollection<SubscriptionClub> SubscriptionapiClubs { get; set; }
        public ICollection<ClubSubscription> SubscriptionsForClub { get; set; }
        public IdentityApplicationUser User { get; set; }
        public ICollection<PermissionRole> UserRoles { get; set; }
        public ICollection<IdentityApplicationUser> Users { get; set; }
        public ICollection<IdentityApplicationUser> UsersById { get; set; }
    }

    public class Mutation
    {
        public PermissionRole AddInstructor { get; set; }
        public Club CreateClub { get; set; }
        public ClubMember CreateClubMember { get; set; }
        public ClubSubscription CreateClubSubscription { get; set; }
        public Event CreateEvent { get; set; }
        public Room CreateRoom { get; set; }
        public IdentityResponse CreateUser { get; set; }
        public Room DeleteRoom { get; set; }
        public IdentityApplicationUser EditUser { get; set; }
        public IdentityResponse LoginUser { get; set; }
        public PermissionRole RemoveInstructor { get; set; }
        public EventParticipant SignUpFreeEvent { get; set; }
        public Club UpdateClub { get; set; }
        public ClubMember UpdateClubMember { get; set; }
        public ClubSubscription UpdateClubSubscription { get; set; }
        public Event UpdateEvent { get; set; }
        public Room UpdateRoom { get; set; }
        public EventVerification VerifyCode { get; set; }
    }

    public class IdentityApplicationUser
    {
        public int? AccessFailedCount { get; set; }
        public object BirthDate { get; set; }
        public string ConcurrencyStamp { get; set; }
        public string Email { get; set; }
        public bool? EmailConfirmed { get; set; }
        public ICollection<EventVerification> Events { get; set; }
        public string Id { get; set; }
        public bool? LockoutEnabled { get; set; }
        public object LockoutEnd { get; set; }
        public string Name { get; set; }
        public string NormalizedEmail { get; set; }
        public string NormalizedUserName { get; set; }
        public string PasswordHash { get; set; }
        public ICollection<PermissionRole> Permissions { get; set; }
        public string PhoneNumber { get; set; }
        public bool? PhoneNumberConfirmed { get; set; }
        public string SecurityStamp { get; set; }
        public bool? TwoFactorEnabled { get; set; }
        public string UserName { get; set; }
    }

    public class IdentityResponse
    {
        public string Token { get; set; }
        public IdentityApplicationUser User { get; set; }
    }

    public class Club
    {
        public string AccountNumber { get; set; }
        public string Address { get; set; }
        public string AdminId { get; set; }
        public string ClubId { get; set; }
        public ICollection<ClubSubscription> Clubsubscription { get; set; }
        public string Description { get; set; }
        public ICollection<Event> Events { get; set; }
        public ICollection<PermissionRole> Instructors { get; set; }
        public string Name { get; set; }
        public string PhoneNumber { get; set; }
        public string RegistrationNumber { get; set; }
        public ICollection<Room> Rooms { get; set; }
        public IdentityApplicationUser User { get; set; }
    }

    public class ClubSubscription
    {
        public SubscriptionClub Club { get; set; }
        public string ClubId { get; set; }
        public string ClubSubscriptionId { get; set; }
        public string Name { get; set; }
        public int? Price { get; set; }
    }

    public class SubscriptionClub
    {
        public string ClubId { get; set; }
        public ICollection<ClubSubscription> Subscriptions { get; set; }
    }

    public class ClubMember
    {
        public string ClubId { get; set; }
        public string ClubSubscriptionId { get; set; }
        public IdentityApplicationUser User { get; set; }
        public string UserId { get; set; }
    }

    public class ClubmemberClubSubscription
    {
        public string ClubId { get; set; }
        public ICollection<ClubMember> ClubMembers { get; set; }
        public string ClubSubscriptionId { get; set; }
    }

    public class Room
    {
        public ICollection<RoomBooking> Bookings { get; set; }
        public string ClubId { get; set; }
        public string Name { get; set; }
        public string RoomId { get; set; }
        public ICollection<RoomValidationResult> Validate { get; set; }
    }

    public class RoomBooking
    {
        public object EndTime { get; set; }
        public string EventId { get; set; }
        public string Name { get; set; }
        public string RoomId { get; set; }
        public object StartTime { get; set; }
        public ICollection<RoomValidationResult> Validate { get; set; }
    }

    public class RoomClub
    {
        public string ClubId { get; set; }
        public ICollection<Room> Rooms { get; set; }
    }

    public class RoomValidationResult
    {
        public string ErrorMessage { get; set; }
        public ICollection<string> MemberNames { get; set; }
    }

    public class Event
    {
        public Club Club { get; set; }
        public string ClubId { get; set; }
        public string Description { get; set; }
        public object EndTime { get; set; }
        public string EventId { get; set; }
        public ICollection<EventPrice> EventPrices { get; set; }
        public ICollection<InstructorForEvent> InstructorForEvents { get; set; }
        public ICollection<RoomEvent> Locations { get; set; }
        public string Name { get; set; }
        public decimal? PublicPrice { get; set; }
        public object StartTime { get; set; }
        public EventStatus? Status { get; set; }
        public decimal? UserPrice { get; set; }
        public ICollection<EventValidationResult> Validate { get; set; }
    }

    public class EventValidationResult
    {
        public string ErrorMessage { get; set; }
        public ICollection<string> MemberNames { get; set; }
    }

    public class EventPrice
    {
        public EventClubSubscription ClubSubscription { get; set; }
        public string ClubSubscriptionId { get; set; }
        public Event Event { get; set; }
        public string EventId { get; set; }
        public decimal? Price { get; set; }
        public ICollection<EventValidationResult> Validate { get; set; }
    }

    public class RoomEvent
    {
        public Event Event { get; set; }
        public string EventId { get; set; }
        public Room Room { get; set; }
        public string RoomId { get; set; }
    }

    public class InstructorForEvent
    {
        public Event Event { get; set; }
        public string EventId { get; set; }
        public EventInstructor Instructor { get; set; }
        public string InstructorId { get; set; }
        public IdentityApplicationUser User { get; set; }
    }

    public class EventClubSubscription
    {
        public string ClubId { get; set; }
        public string ClubSubscriptionId { get; set; }
        public ICollection<EventPrice> EventPrices { get; set; }
    }

    public class EventRoom
    {
        public string ClubId { get; set; }
        public ICollection<RoomEvent> Locations { get; set; }
        public string RoomId { get; set; }
    }

    public class EventInstructor
    {
        public string ClubId { get; set; }
        public ICollection<InstructorForEvent> InstructorForEvents { get; set; }
        public string InstructorId { get; set; }
    }

    public class EventParticipant
    {
        public EventparticipantEvent Event { get; set; }
        public string EventId { get; set; }
        public string EventParticipantId { get; set; }
        public string UserId { get; set; }
    }

    public class EventparticipantEvent
    {
        public string ClubId { get; set; }
        public string EventId { get; set; }
        public ICollection<EventParticipant> EventParticipants { get; set; }
        public ICollection<EventparticipantEventPrice> EventPrices { get; set; }
        public decimal? PublicPrice { get; set; }
    }

    public class EventparticipantEventPrice
    {
        public string ClubSubscriptionId { get; set; }
        public EventparticipantEvent Event { get; set; }
        public string EventId { get; set; }
        public decimal? Price { get; set; }
    }

    public class PermissionRole
    {
        public Club Club { get; set; }
        public string ClubId { get; set; }
        public ClubSubscription ClubSubscription { get; set; }
        public string ClubSubscriptionId { get; set; }
        public IdentityApplicationUser User { get; set; }
        public string UserId { get; set; }
        public string UserRole { get; set; }
    }

    public class PermissionUser
    {
        public ICollection<PermissionRole> Roles { get; set; }
        public string UserId { get; set; }
    }

    public class PermissionClub
    {
        public string ClubId { get; set; }
        public ICollection<PermissionRole> Users { get; set; }
    }

    public class EventVerification
    {
        public string Code { get; set; }
        public string EventId { get; set; }
        public int? EventVerificationId { get; set; }
        public PresenceStatusEnum? Status { get; set; }
        public string UserId { get; set; }
    }
    #endregion
}
