extend type Club {
  user: identity_ApplicationUser
    @delegate(schema: "identityapi", path: "user(id: $fields:adminId)")

  clubsubscription: [ClubSubscription]
    @delegate(
      schema: "subscriptionapi"
      path: "subscriptionsForClub(clubId: $fields:clubId)"
    )

  instructors: [permission_Role]
    @delegate(
      schema: "permissionapi"
      path: "instructorInClub(clubId: $fields:clubId)"
    )

  rooms: [Room]
    @delegate(schema: "roomapi", path: "roomsForClub(clubId: $fields:clubId)")

  events: [Event]
    @delegate(schema: "eventapi", path: "eventsForClub(clubId: $fields:clubId)")
}

extend type identity_ApplicationUser {
  permissions: [permission_Role]
    @delegate(
      schema: "permissionapi"
      path: "rolesForUserId(userId: $fields:id)"
    )
  events: [EventVerification]
    @delegate(
      schema: "eventverificationapi"
      path: "eventsForUser(userId: $fields:id)"
    )
}

extend type permission_Role {
  club: Club
    @delegate(schema: "clubapi", path: "clubByID(clubId: $fields:clubId)")

  clubSubscription: ClubSubscription
    @delegate(
      schema: "subscriptionapi"
      path: "clubSubscriptionByID(clubSubscriptionId: $fields:clubSubscriptionId)"
    )

  user: identity_ApplicationUser
    @delegate(schema: "identityapi", path: "user(id: $fields:userId)")
}

extend type ClubMember {
  user: identity_ApplicationUser
    @delegate(schema: "identityapi", path: "user(id: $fields:userId)")
}

extend type InstructorForEvent {
  user: identity_ApplicationUser
    @delegate(schema: "identityapi", path: "user(id: $fields:instructorId)")
}

extend type RoomEvent {
  room: Room!
    @delegate(schema: "roomapi", path: "roomById(roomId: $fields:roomId)")
}

extend type Event{
  userPrice: Float @delegate(schema: "paymentapi", path: "eventUserPrice(eventId : $fields:eventId)")
  club: Club
    @delegate(schema: "clubapi", path: "clubByID(clubId: $fields:clubId)")
  participants: [EventVerification] @delegate(schema: "eventverificationapi", path: "participants(eventId: $fields:eventId)")
}

extend type EventPrice{
  clubSubscription: ClubSubscription
    @delegate(
      schema: "subscriptionapi"
      path: "clubSubscriptionByID(clubSubscriptionId: $fields:clubSubscriptionId)"
    )
}

extend type EventParticipant{
  event: Event @delegate(schema: "eventapi", path: "getEvent(eventId: $fields:eventId)")
}