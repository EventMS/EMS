// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
#if!GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
#endif

namespace Test
{
    #region base classes
    public struct FieldMetadata
    {
        public string Name { get; set; }
        public string DefaultAlias { get; set; }
        public bool IsComplex { get; set; }
        public Type QueryBuilderType { get; set; }
    }
    
    public enum Formatting
    {
        None,
        Indented
    }
    
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    public class QueryBuilderParameterConverter<T> : JsonConverter
    {
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                default:
                    return (QueryBuilderParameter<T>)(T)serializer.Deserialize(reader, typeof(T));
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            if (value == null)
                writer.WriteNull();
            else
                serializer.Serialize(writer, ((QueryBuilderParameter<T>)value).Value, typeof(T));
        }
    
        public override bool CanConvert(Type objectType) => objectType.IsSubclassOf(typeof(QueryBuilderParameter));
    }
    #endif
    
    internal static class GraphQlQueryHelper
    {
        private static readonly Regex RegexWhiteSpace = new Regex(@"\s", RegexOptions.Compiled);
        private static readonly Regex RegexGraphQlIdentifier = new Regex(@"^[_A-Za-z][_0-9A-Za-z]*$", RegexOptions.Compiled);
    
        public static string GetIndentation(int level, byte indentationSize)
        {
            return new String(' ', level * indentationSize);
        }
    
        public static string BuildArgumentValue(object value, string formatMask, Formatting formatting, int level, byte indentationSize)
        {
            if (value is null)
                return "null";
    
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
            if (value is JValue jValue)
            {
                switch (jValue.Type)
                {
                    case JTokenType.Null: return "null";
                    case JTokenType.Integer:
                    case JTokenType.Float:
                    case JTokenType.Boolean:
                        return BuildArgumentValue(jValue.Value, null, formatting, level, indentationSize);
                    default:
                        return "\"" + jValue.Value + "\"";
                }
            }
    
            if (value is JProperty jProperty)
            {
                if (RegexWhiteSpace.IsMatch(jProperty.Name))
                    throw new ArgumentException($"JSON object keys used as GraphQL arguments must not contain whitespace; key: {jProperty.Name}");
    
                return $"{jProperty.Name}:{(formatting == Formatting.Indented ? " " : null)}{BuildArgumentValue(jProperty.Value, null, formatting, level, indentationSize)}";
            }
    
            if (value is JObject jObject)
                return BuildEnumerableArgument(jObject, null, formatting, level + 1, indentationSize, '{', '}');
    #endif
    
            var enumerable = value as IEnumerable;
            if (!String.IsNullOrEmpty(formatMask) && enumerable == null)
                return
                    value is IFormattable formattable
                        ? "\"" + formattable.ToString(formatMask, CultureInfo.InvariantCulture) + "\""
                        : throw new ArgumentException($"Value must implement {nameof(IFormattable)} interface to use a format mask. ", nameof(value));
    
            if (value is Enum @enum)
                return ConvertEnumToString(@enum);
    
            if (value is bool @bool)
                return @bool ? "true" : "false";
    
            if (value is DateTime dateTime)
                return "\"" + dateTime.ToString("O") + "\"";
    
            if (value is DateTimeOffset dateTimeOffset)
                return "\"" + dateTimeOffset.ToString("O") + "\"";
    
            if (value is IGraphQlInputObject inputObject)
                return BuildInputObject(inputObject, formatting, level + 2, indentationSize);
    
            if (value is String || value is Guid)
                return "\"" + value + "\"";
    
            if (enumerable != null)
                return BuildEnumerableArgument(enumerable, formatMask, formatting, level, indentationSize, '[', ']');
    
            if (value is short || value is ushort || value is byte || value is int || value is uint || value is long || value is ulong || value is float || value is double || value is decimal)
                return Convert.ToString(value, CultureInfo.InvariantCulture);
    
            var argumentValue = Convert.ToString(value, CultureInfo.InvariantCulture);
            return "\"" + argumentValue + "\"";
        }
    
        private static string BuildEnumerableArgument(IEnumerable enumerable, string formatMask, Formatting formatting, int level, byte indentationSize, char openingSymbol, char closingSymbol)
        {
            var builder = new StringBuilder();
            builder.Append(openingSymbol);
            var delimiter = String.Empty;
            foreach (var item in enumerable)
            {
                builder.Append(delimiter);
    
                if (formatting == Formatting.Indented)
                {
                    builder.AppendLine();
                    builder.Append(GetIndentation(level + 1, indentationSize));
                }
    
                builder.Append(BuildArgumentValue(item, formatMask, formatting, level, indentationSize));
                delimiter = ",";
            }
    
            builder.Append(closingSymbol);
            return builder.ToString();
        }
    
        public static string BuildInputObject(IGraphQlInputObject inputObject, Formatting formatting, int level, byte indentationSize)
        {
            var builder = new StringBuilder();
            builder.Append("{");
    
            var isIndentedFormatting = formatting == Formatting.Indented;
            string valueSeparator;
            if (isIndentedFormatting)
            {
                builder.AppendLine();
                valueSeparator = ": ";
            }
            else
                valueSeparator = ":";
    
            var separator = String.Empty;
            foreach (var propertyValue in inputObject.GetPropertyValues())
            {
                var queryBuilderParameter = propertyValue.Value as QueryBuilderParameter;
                var value =
                    queryBuilderParameter?.Name != null
                        ? "$" + queryBuilderParameter.Name
                        : BuildArgumentValue(queryBuilderParameter?.Value ?? propertyValue.Value, propertyValue.FormatMask, formatting, level, indentationSize);
    
                builder.Append(isIndentedFormatting ? GetIndentation(level, indentationSize) : separator);
                builder.Append(propertyValue.Name);
                builder.Append(valueSeparator);
                builder.Append(value);
    
                separator = ",";
    
                if (isIndentedFormatting)
                    builder.AppendLine();
            }
    
            if (isIndentedFormatting)
                builder.Append(GetIndentation(level - 1, indentationSize));
    
            builder.Append("}");
    
            return builder.ToString();
        }
    
        public static string BuildDirective(GraphQlDirective directive, Formatting formatting, int level, byte indentationSize)
        {
            if (directive == null)
                return String.Empty;
    
            var isIndentedFormatting = formatting == Formatting.Indented;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
            builder.Append(indentationSpace);
            builder.Append("@");
            builder.Append(directive.Name);
            builder.Append("(");
    
            string separator = null;
            foreach (var kvp in directive.Arguments)
            {
                var argumentName = kvp.Key;
                var argument = kvp.Value;
    
                builder.Append(separator);
                builder.Append(argumentName);
                builder.Append(":");
                builder.Append(indentationSpace);
    
                if (argument.Name == null)
                    builder.Append(BuildArgumentValue(argument.Value, null, formatting, level, indentationSize));
                else
                {
                    builder.Append("$");
                    builder.Append(argument.Name);
                }
    
                separator = isIndentedFormatting ? ", " : ",";
            }
    
            builder.Append(")");
            return builder.ToString();
        }
    
        public static void ValidateGraphQlIdentifier(string name, string identifier)
        {
            if (identifier != null && !RegexGraphQlIdentifier.IsMatch(identifier))
                throw new ArgumentException("value must match [_A-Za-z][_0-9A-Za-z]*", name);
        }
    
        private static string ConvertEnumToString(Enum @enum)
        {
            var enumMember = @enum.GetType().GetTypeInfo().GetField(@enum.ToString());
                if (enumMember == null)
                    throw new InvalidOperationException("enum member resolution failed");
    
            var enumMemberAttribute = (EnumMemberAttribute)enumMember.GetCustomAttribute(typeof(EnumMemberAttribute));
    
            return enumMemberAttribute == null
                ? @enum.ToString()
                : enumMemberAttribute.Value;
        }
    }
    
    internal struct InputPropertyInfo
    {
        public string Name { get; set; }
        public object Value { get; set; }
        public string FormatMask { get; set; }
    }
    
    internal interface IGraphQlInputObject
    {
        IEnumerable<InputPropertyInfo> GetPropertyValues();
    }
    
    public interface IGraphQlQueryBuilder
    {
        void Clear();
        void IncludeAllFields();
        string Build(Formatting formatting = Formatting.None, byte indentationSize = 2);
    }
    
    public struct QueryBuilderArgumentInfo
    {
        public string ArgumentName { get; set; }
        public QueryBuilderParameter ArgumentValue { get; set; }
        public string FormatMask { get; set; }
    }
    
    public abstract class QueryBuilderParameter
    {
        private string _name;
    
        internal string GraphQlTypeName { get; }
        internal object Value { get; set; }
    
        public string Name
        {
            get => _name;
            set
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(Name), value);
                _name = value;
            }
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, object value)
        {
            Name = name?.Trim();
            GraphQlTypeName = graphQlTypeName?.Replace(" ", null).Replace("\t", null).Replace("\n", null).Replace("\r", null);
            Value = value;
        }
    
        protected QueryBuilderParameter(object value) => Value = value;
    }
    
    public class QueryBuilderParameter<T> : QueryBuilderParameter
    {
        public new T Value
        {
            get => (T)base.Value;
            set => base.Value = value;
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
        {
        }
    
        private QueryBuilderParameter(T value) : base(value)
        {
        }
    
        public static implicit operator QueryBuilderParameter<T>(T value) => new QueryBuilderParameter<T>(value);
    
        public static implicit operator T(QueryBuilderParameter<T> parameter) => parameter.Value;
    }
    
    public class GraphQlQueryParameter<T> : QueryBuilderParameter<T>
    {
        private string _formatMask;
    
        public string FormatMask
        {
            get => _formatMask;
            set => _formatMask =
                typeof(IFormattable).GetTypeInfo().IsAssignableFrom(typeof(T))
                    ? value
                    : throw new InvalidOperationException($"Value must be of {nameof(IFormattable)} type. ");
        }
    
        public GraphQlQueryParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
        {
        }
    }
    
    public abstract class GraphQlDirective
    {
        private readonly Dictionary<string, QueryBuilderParameter> _arguments = new Dictionary<string, QueryBuilderParameter>();
    
        internal IEnumerable<KeyValuePair<string, QueryBuilderParameter>> Arguments => _arguments;
    
        public string Name { get; }
    
        protected GraphQlDirective(string name)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(name), name);
            Name = name;
        }
    
        protected void AddArgument(string name, QueryBuilderParameter value)
        {
            if (value != null)
                _arguments[name] = value;
        }
    }
    
    public abstract class GraphQlQueryBuilder : IGraphQlQueryBuilder
    {
        private readonly Dictionary<string, GraphQlFieldCriteria> _fieldCriteria = new Dictionary<string, GraphQlFieldCriteria>();
    
        private string _operationType { get; }
        private string _operationName { get; }
        private Dictionary<string, GraphQlFragmentCriteria> _fragments;
        private List<QueryBuilderArgumentInfo> _queryParameters;
    
        protected abstract string TypeName { get; }
    
        public abstract IReadOnlyList<FieldMetadata> AllFields { get; }
    
        protected GraphQlQueryBuilder(string operationType, string operationName)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(operationName), operationName);
            _operationType = operationType;
            _operationName = operationName;
        }
    
        public virtual void Clear()
        {
            _fieldCriteria.Clear();
            _fragments?.Clear();
            _queryParameters?.Clear();
        }
    
        void IGraphQlQueryBuilder.IncludeAllFields()
        {
            IncludeAllFields();
        }
    
        public string Build(Formatting formatting = Formatting.None, byte indentationSize = 2)
        {
            return Build(formatting, 1, indentationSize);
        }
    
        protected void IncludeAllFields()
        {
            IncludeFields(AllFields);
        }
    
        protected virtual string Build(Formatting formatting, int level, byte indentationSize)
        {
            var isIndentedFormatting = formatting == Formatting.Indented;
            var separator = String.Empty;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
    
            if (!String.IsNullOrEmpty(_operationType))
            {
                builder.Append(_operationType);
    
                if (!String.IsNullOrEmpty(_operationName))
                {
                    builder.Append(" ");
                    builder.Append(_operationName);
                }
    
                if (_queryParameters?.Count > 0)
                {
                    builder.Append(indentationSpace);
                    builder.Append("(");
    
                    foreach (var queryParameterInfo in _queryParameters)
                    {
                        if (isIndentedFormatting)
                        {
                            builder.AppendLine(separator);
                            builder.Append(GraphQlQueryHelper.GetIndentation(level, indentationSize));
                        }
                        else
                            builder.Append(separator);
                        
                        builder.Append("$");
                        builder.Append(queryParameterInfo.ArgumentValue.Name);
                        builder.Append(":");
                        builder.Append(indentationSpace);
    
                        builder.Append(queryParameterInfo.ArgumentValue.GraphQlTypeName);
    
                        if (!queryParameterInfo.ArgumentValue.GraphQlTypeName.EndsWith("!"))
                        {
                            builder.Append(indentationSpace);
                            builder.Append("=");
                            builder.Append(indentationSpace);
                            builder.Append(GraphQlQueryHelper.BuildArgumentValue(queryParameterInfo.ArgumentValue.Value, queryParameterInfo.FormatMask, formatting, 0, indentationSize));
                        }
    
                        separator = ",";
                    }
    
                    builder.Append(")");
                }
            }
    
            builder.Append(indentationSpace);
            builder.Append("{");
    
            if (isIndentedFormatting)
                builder.AppendLine();
    
            separator = String.Empty;
            
            foreach (var criteria in _fieldCriteria.Values.Concat(_fragments?.Values ?? Enumerable.Empty<GraphQlFragmentCriteria>()))
            {
                var fieldCriteria = criteria.Build(formatting, level, indentationSize);
                if (isIndentedFormatting)
                    builder.AppendLine(fieldCriteria);
                else if (!String.IsNullOrEmpty(fieldCriteria))
                {
                    builder.Append(separator);
                    builder.Append(fieldCriteria);
                }
    
                separator = ",";
            }
    
            if (isIndentedFormatting)
                builder.Append(GraphQlQueryHelper.GetIndentation(level - 1, indentationSize));
            
            builder.Append("}");
    
            return builder.ToString();
        }
    
        protected void IncludeScalarField(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlScalarFieldCriteria(fieldName, alias, args, directives);
        }
    
        protected void IncludeObjectField(string fieldName, string alias, GraphQlQueryBuilder objectFieldQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlObjectFieldCriteria(fieldName, alias, objectFieldQueryBuilder, args, directives);
        }
    
        protected void IncludeFragment(GraphQlQueryBuilder objectFieldQueryBuilder, GraphQlDirective[] directives)
        {
            _fragments = _fragments ?? new Dictionary<string, GraphQlFragmentCriteria>();
            _fragments[objectFieldQueryBuilder.TypeName] = new GraphQlFragmentCriteria(objectFieldQueryBuilder, directives);
        }
    
        protected void ExcludeField(string fieldName)
        {
            if (fieldName == null)
                throw new ArgumentNullException(nameof(fieldName));
    
            _fieldCriteria.Remove(fieldName);
        }
    
        protected void IncludeFields(IEnumerable<FieldMetadata> fields)
        {
            IncludeFields(fields, null);
        }
    
        private void IncludeFields(IEnumerable<FieldMetadata> fields, List<Type> parentTypes)
        {
            foreach (var field in fields)
            {
                if (field.QueryBuilderType == null)
                    IncludeScalarField(field.Name, field.DefaultAlias, null, null);
                else
                {
                    var builderType = GetType();
    
                    if (parentTypes != null && parentTypes.Any(t => t.IsAssignableFrom(field.QueryBuilderType)))
                        continue;
    
                    parentTypes?.Add(builderType);
    
                    var queryBuilder = InitializeChildBuilder(builderType, field.QueryBuilderType, parentTypes);
    
                    var includeFragmentMethods = field.QueryBuilderType.GetMethods().Where(IsIncludeFragmentMethod);
    
                    foreach (var includeFragmentMethod in includeFragmentMethods)
                        includeFragmentMethod.Invoke(queryBuilder, new object[] { InitializeChildBuilder(builderType, includeFragmentMethod.GetParameters()[0].ParameterType, parentTypes) });
    
                    IncludeObjectField(field.Name, field.DefaultAlias, queryBuilder, null, null);
                }
            }
        }
    
        private static GraphQlQueryBuilder InitializeChildBuilder(Type parentQueryBuilderType, Type queryBuilderType, List<Type> parentTypes)
        {
            var queryBuilder = (GraphQlQueryBuilder)Activator.CreateInstance(queryBuilderType);
            queryBuilder.IncludeFields(queryBuilder.AllFields, parentTypes ?? new List<Type> { parentQueryBuilderType });
            return queryBuilder;
        }
    
        private static bool IsIncludeFragmentMethod(MethodInfo methodInfo)
        {
            if (!methodInfo.Name.StartsWith("With") || !methodInfo.Name.EndsWith("Fragment"))
                return false;
    
            var parameters = methodInfo.GetParameters();
            return parameters.Length == 1 && parameters[0].ParameterType.IsSubclassOf(typeof(GraphQlQueryBuilder));
        }
    
        protected void AddParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            if (_queryParameters == null)
                _queryParameters = new List<QueryBuilderArgumentInfo>();
            
            _queryParameters.Add(new QueryBuilderArgumentInfo { ArgumentValue = parameter, FormatMask = parameter.FormatMask });
        }
    
        private abstract class GraphQlFieldCriteria
        {
            private readonly IList<QueryBuilderArgumentInfo> _args;
            private readonly GraphQlDirective[] _directives;
    
            protected readonly string FieldName;
            protected readonly string Alias;
    
            protected static string GetIndentation(Formatting formatting, int level, byte indentationSize) =>
                formatting == Formatting.Indented ? GraphQlQueryHelper.GetIndentation(level, indentationSize) : null;
    
            protected GraphQlFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(alias), alias);
                FieldName = fieldName;
                Alias = alias;
                _args = args;
                _directives = directives;
            }
    
            public abstract string Build(Formatting formatting, int level, byte indentationSize);
    
            protected string BuildArgumentClause(Formatting formatting, int level, byte indentationSize)
            {
                var separator = formatting == Formatting.Indented ? " " : null;
                var argumentCount = _args?.Count ?? 0;
                if (argumentCount == 0)
                    return String.Empty;
    
                var arguments =
                    _args.Select(
                        a => $"{a.ArgumentName}:{separator}{(a.ArgumentValue.Name == null ? GraphQlQueryHelper.BuildArgumentValue(a.ArgumentValue.Value, a.FormatMask, formatting, level, indentationSize) : "$" + a.ArgumentValue.Name)}");
    
                return $"({String.Join($",{separator}", arguments)})";
            }
    
            protected string BuildDirectiveClause(Formatting formatting, int level, byte indentationSize) =>
                _directives == null ? null : String.Concat(_directives.Select(d => d == null ? null : GraphQlQueryHelper.BuildDirective(d, formatting, level, indentationSize)));
    
            protected static string BuildAliasPrefix(string alias, Formatting formatting)
            {
                var separator = formatting == Formatting.Indented ? " " : String.Empty;
                return String.IsNullOrWhiteSpace(alias) ? null : alias + ':' + separator;
            }
        }
    
        private class GraphQlScalarFieldCriteria : GraphQlFieldCriteria
        {
            public GraphQlScalarFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
            }
    
            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                GetIndentation(formatting, level, indentationSize) +
                BuildAliasPrefix(Alias, formatting) +
                FieldName +
                BuildArgumentClause(formatting, level, indentationSize) +
                BuildDirectiveClause(formatting, level, indentationSize);
        }
    
        private class GraphQlObjectFieldCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlObjectFieldCriteria(string fieldName, string alias, GraphQlQueryBuilder objectQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                _objectQueryBuilder._fieldCriteria.Count > 0 || _objectQueryBuilder._fragments?.Count > 0
                    ? GetIndentation(formatting, level, indentationSize) + BuildAliasPrefix(Alias, formatting) + FieldName +
                      BuildArgumentClause(formatting, level, indentationSize) + BuildDirectiveClause(formatting, level, indentationSize) + _objectQueryBuilder.Build(formatting, level + 1, indentationSize)
                    : null;
        }
    
        private class GraphQlFragmentCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlFragmentCriteria(GraphQlQueryBuilder objectQueryBuilder, GraphQlDirective[] directives) : base(objectQueryBuilder.TypeName, null, null, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(Formatting formatting, int level, byte indentationSize) =>
                _objectQueryBuilder._fieldCriteria.Count == 0
                    ? null
                    : GetIndentation(formatting, level, indentationSize) + "..." + (formatting == Formatting.Indented ? " " : null) + "on " +
                      FieldName + BuildArgumentClause(formatting, level, indentationSize) + BuildDirectiveClause(formatting, level, indentationSize) + _objectQueryBuilder.Build(formatting, level + 1, indentationSize);
        }
    }
    
    public abstract class GraphQlQueryBuilder<TQueryBuilder> : GraphQlQueryBuilder where TQueryBuilder : GraphQlQueryBuilder<TQueryBuilder>
    {
        protected GraphQlQueryBuilder(string operationType = null, string operationName = null) : base(operationType, operationName)
        {
        }
    
        public TQueryBuilder WithAllFields()
        {
            IncludeAllFields();
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder WithAllScalarFields()
        {
            IncludeFields(AllFields.Where(f => !f.IsComplex));
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder ExceptField(string fieldName)
        {
            ExcludeField(fieldName);
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder WithTypeName(string alias = null, params GraphQlDirective[] directives)
        {
            IncludeScalarField("__typename", alias, null, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithScalarField(string fieldName, string alias, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeScalarField(fieldName, alias, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithObjectField(string fieldName, string alias, GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeObjectField(fieldName, alias, queryBuilder, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithFragment(GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives)
        {
            IncludeFragment(queryBuilder, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithParameterInternal<T>(GraphQlQueryParameter<T> parameter)
        {
            AddParameter(parameter);
            return (TQueryBuilder)this;
        }
    }
    
    public abstract class GraphQlResponse<TDataContract>
    {
        public TDataContract Data { get; set; }
        public ICollection<QueryError> Errors { get; set; }
    }
    
    public class QueryError
    {
        public string Message { get; set; }
        public ICollection<ErrorLocation> Locations { get; set; }
    }
    
    public class ErrorLocation
    {
        public int Line { get; set; }
        public int Column { get; set; }
    }
    #endregion

    #region enums
    public enum EventType
    {
        [EnumMember(Value = "PUBLIC")] Public,
        [EnumMember(Value = "PRIVATE")] Private
    }

    public enum EventStatus
    {
        [EnumMember(Value = "PENDING")] Pending,
        [EnumMember(Value = "CONFIRMED")] Confirmed,
        [EnumMember(Value = "FAILED")] Failed
    }
    #endregion

    #nullable enable
    #region directives
    public class AuthorizeDirective : GraphQlDirective
    {
        public AuthorizeDirective(QueryBuilderParameter<string?>? policy = null, QueryBuilderParameter<IEnumerable<string>>? roles = null) : base("authorize")
        {
            AddArgument("policy", policy);
            AddArgument("roles", roles);
        }
    }

    public class SkipDirective : GraphQlDirective
    {
        public SkipDirective(QueryBuilderParameter<bool> @if) : base("skip")
        {
            AddArgument("if", @if);
        }
    }

    public class IncludeDirective : GraphQlDirective
    {
        public IncludeDirective(QueryBuilderParameter<bool> @if) : base("include")
        {
            AddArgument("if", @if);
        }
    }

    public class SourceDirective : GraphQlDirective
    {
        public SourceDirective(QueryBuilderParameter<object> name, QueryBuilderParameter<object> schema) : base("source")
        {
            AddArgument("name", name);
            AddArgument("schema", schema);
        }
    }
    #endregion

    #region builder classes
    public class QueryQueryBuilder : GraphQlQueryBuilder<QueryQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "bookings", IsComplex = true, QueryBuilderType = typeof(RoomBookingQueryBuilder) },
            new FieldMetadata { Name = "clubmemberapi_clubSubscriptions", IsComplex = true, QueryBuilderType = typeof(ClubmemberClubSubscriptionQueryBuilder) },
            new FieldMetadata { Name = "clubMembers", IsComplex = true, QueryBuilderType = typeof(ClubMemberQueryBuilder) },
            new FieldMetadata { Name = "clubs", IsComplex = true, QueryBuilderType = typeof(ClubQueryBuilder) },
            new FieldMetadata { Name = "clubSubscriptions", IsComplex = true, QueryBuilderType = typeof(ClubSubscriptionQueryBuilder) },
            new FieldMetadata { Name = "eventParticipants", IsComplex = true, QueryBuilderType = typeof(EventParticipantQueryBuilder) },
            new FieldMetadata { Name = "myClubs", IsComplex = true, QueryBuilderType = typeof(ClubQueryBuilder) },
            new FieldMetadata { Name = "roomapi_clubs", IsComplex = true, QueryBuilderType = typeof(RoomClubQueryBuilder) },
            new FieldMetadata { Name = "rooms", IsComplex = true, QueryBuilderType = typeof(RoomQueryBuilder) },
            new FieldMetadata { Name = "subscriptionapi_clubs", IsComplex = true, QueryBuilderType = typeof(SubscriptionClubQueryBuilder) },
            new FieldMetadata { Name = "subscriptionsForClub", IsComplex = true, QueryBuilderType = typeof(ClubSubscriptionQueryBuilder) },
            new FieldMetadata { Name = "template1s", IsComplex = true, QueryBuilderType = typeof(Template1QueryBuilder) },
            new FieldMetadata { Name = "users", IsComplex = true, QueryBuilderType = typeof(IdentityApplicationUserQueryBuilder) }
        };

        protected override string TypeName { get; } = "Query";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public QueryQueryBuilder(string? operationName = null) : base("query", operationName)
        {
        }

        public QueryQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter) => WithParameterInternal(parameter);

        public QueryQueryBuilder WithBookings(RoomBookingQueryBuilder roomBookingQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("bookings", alias, roomBookingQueryBuilder, new GraphQlDirective?[] { skip, include });

        public QueryQueryBuilder ExceptBookings() => ExceptField("bookings");

        public QueryQueryBuilder WithClubmemberapiClubSubscriptions(ClubmemberClubSubscriptionQueryBuilder clubmemberClubSubscriptionQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("clubmemberapi_clubSubscriptions", alias, clubmemberClubSubscriptionQueryBuilder, new GraphQlDirective?[] { skip, include });

        public QueryQueryBuilder ExceptClubmemberapiClubSubscriptions() => ExceptField("clubmemberapi_clubSubscriptions");

        public QueryQueryBuilder WithClubMembers(ClubMemberQueryBuilder clubMemberQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("clubMembers", alias, clubMemberQueryBuilder, new GraphQlDirective?[] { skip, include });

        public QueryQueryBuilder ExceptClubMembers() => ExceptField("clubMembers");

        public QueryQueryBuilder WithClubs(ClubQueryBuilder clubQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("clubs", alias, clubQueryBuilder, new GraphQlDirective?[] { skip, include });

        public QueryQueryBuilder ExceptClubs() => ExceptField("clubs");

        public QueryQueryBuilder WithClubSubscriptions(ClubSubscriptionQueryBuilder clubSubscriptionQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("clubSubscriptions", alias, clubSubscriptionQueryBuilder, new GraphQlDirective?[] { skip, include });

        public QueryQueryBuilder ExceptClubSubscriptions() => ExceptField("clubSubscriptions");

        public QueryQueryBuilder WithEventParticipants(EventParticipantQueryBuilder eventParticipantQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("eventParticipants", alias, eventParticipantQueryBuilder, new GraphQlDirective?[] { skip, include });

        public QueryQueryBuilder ExceptEventParticipants() => ExceptField("eventParticipants");

        public QueryQueryBuilder WithMyClubs(ClubQueryBuilder clubQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("myClubs", alias, clubQueryBuilder, new GraphQlDirective?[] { skip, include });

        public QueryQueryBuilder ExceptMyClubs() => ExceptField("myClubs");

        public QueryQueryBuilder WithRoomapiClubs(RoomClubQueryBuilder roomClubQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("roomapi_clubs", alias, roomClubQueryBuilder, new GraphQlDirective?[] { skip, include });

        public QueryQueryBuilder ExceptRoomapiClubs() => ExceptField("roomapi_clubs");

        public QueryQueryBuilder WithRooms(RoomQueryBuilder roomQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("rooms", alias, roomQueryBuilder, new GraphQlDirective?[] { skip, include });

        public QueryQueryBuilder ExceptRooms() => ExceptField("rooms");

        public QueryQueryBuilder WithSubscriptionapiClubs(SubscriptionClubQueryBuilder subscriptionClubQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("subscriptionapi_clubs", alias, subscriptionClubQueryBuilder, new GraphQlDirective?[] { skip, include });

        public QueryQueryBuilder ExceptSubscriptionapiClubs() => ExceptField("subscriptionapi_clubs");

        public QueryQueryBuilder WithSubscriptionsForClub(ClubSubscriptionQueryBuilder clubSubscriptionQueryBuilder, QueryBuilderParameter<object> clubId, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "clubId", ArgumentValue = clubId} );
            return WithObjectField("subscriptionsForClub", alias, clubSubscriptionQueryBuilder, new GraphQlDirective?[] { skip, include }, args);
        }

        public QueryQueryBuilder ExceptSubscriptionsForClub() => ExceptField("subscriptionsForClub");

        public QueryQueryBuilder WithTemplate1S(Template1QueryBuilder template1QueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("template1s", alias, template1QueryBuilder, new GraphQlDirective?[] { skip, include });

        public QueryQueryBuilder ExceptTemplate1S() => ExceptField("template1s");

        public QueryQueryBuilder WithUsers(IdentityApplicationUserQueryBuilder identityApplicationUserQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("users", alias, identityApplicationUserQueryBuilder, new GraphQlDirective?[] { skip, include });

        public QueryQueryBuilder ExceptUsers() => ExceptField("users");
    }

    public class MutationQueryBuilder : GraphQlQueryBuilder<MutationQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "addInstructor", IsComplex = true, QueryBuilderType = typeof(ClubQueryBuilder) },
            new FieldMetadata { Name = "createClub", IsComplex = true, QueryBuilderType = typeof(ClubQueryBuilder) },
            new FieldMetadata { Name = "createClubMember", IsComplex = true, QueryBuilderType = typeof(ClubMemberQueryBuilder) },
            new FieldMetadata { Name = "createClubSubscription", IsComplex = true, QueryBuilderType = typeof(ClubSubscriptionQueryBuilder) },
            new FieldMetadata { Name = "createEvent", IsComplex = true, QueryBuilderType = typeof(EventQueryBuilder) },
            new FieldMetadata { Name = "createRoom", IsComplex = true, QueryBuilderType = typeof(RoomQueryBuilder) },
            new FieldMetadata { Name = "createTemplate1", IsComplex = true, QueryBuilderType = typeof(Template1QueryBuilder) },
            new FieldMetadata { Name = "createUser", IsComplex = true, QueryBuilderType = typeof(IdentityResponseQueryBuilder) },
            new FieldMetadata { Name = "deleteClub", IsComplex = true, QueryBuilderType = typeof(ClubQueryBuilder) },
            new FieldMetadata { Name = "deleteClubMember", IsComplex = true, QueryBuilderType = typeof(ClubMemberQueryBuilder) },
            new FieldMetadata { Name = "deleteRoom", IsComplex = true, QueryBuilderType = typeof(RoomQueryBuilder) },
            new FieldMetadata { Name = "deleteTemplate1", IsComplex = true, QueryBuilderType = typeof(Template1QueryBuilder) },
            new FieldMetadata { Name = "editUser", IsComplex = true, QueryBuilderType = typeof(IdentityApplicationUserQueryBuilder) },
            new FieldMetadata { Name = "loginUser", IsComplex = true, QueryBuilderType = typeof(IdentityResponseQueryBuilder) },
            new FieldMetadata { Name = "removeInstructor", IsComplex = true, QueryBuilderType = typeof(ClubQueryBuilder) },
            new FieldMetadata { Name = "signUpFreeEvent", IsComplex = true },
            new FieldMetadata { Name = "updateClub", IsComplex = true, QueryBuilderType = typeof(ClubQueryBuilder) },
            new FieldMetadata { Name = "updateClubMember", IsComplex = true, QueryBuilderType = typeof(ClubMemberQueryBuilder) },
            new FieldMetadata { Name = "updateClubSubscription", IsComplex = true, QueryBuilderType = typeof(ClubSubscriptionQueryBuilder) },
            new FieldMetadata { Name = "updateEvent", IsComplex = true, QueryBuilderType = typeof(EventQueryBuilder) },
            new FieldMetadata { Name = "updateRoom", IsComplex = true, QueryBuilderType = typeof(RoomQueryBuilder) },
            new FieldMetadata { Name = "updateTemplate1", IsComplex = true, QueryBuilderType = typeof(Template1QueryBuilder) }
        };

        protected override string TypeName { get; } = "Mutation";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public MutationQueryBuilder(string? operationName = null) : base("mutation", operationName)
        {
        }

        public MutationQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter) => WithParameterInternal(parameter);

        public MutationQueryBuilder WithAddInstructor(ClubQueryBuilder clubQueryBuilder, QueryBuilderParameter<object> clubId, QueryBuilderParameter<object> instructorId, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "clubId", ArgumentValue = clubId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "instructorId", ArgumentValue = instructorId} );
            return WithObjectField("addInstructor", alias, clubQueryBuilder, new GraphQlDirective?[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptAddInstructor() => ExceptField("addInstructor");

        public MutationQueryBuilder WithCreateClub(ClubQueryBuilder clubQueryBuilder, QueryBuilderParameter<CreateClubRequestInput?>? request = null, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("createClub", alias, clubQueryBuilder, new GraphQlDirective?[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptCreateClub() => ExceptField("createClub");

        public MutationQueryBuilder WithCreateClubMember(ClubMemberQueryBuilder clubMemberQueryBuilder, QueryBuilderParameter<CreateClubMemberRequestInput?>? request = null, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("createClubMember", alias, clubMemberQueryBuilder, new GraphQlDirective?[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptCreateClubMember() => ExceptField("createClubMember");

        public MutationQueryBuilder WithCreateClubSubscription(ClubSubscriptionQueryBuilder clubSubscriptionQueryBuilder, QueryBuilderParameter<CreateClubSubscriptionRequestInput?>? request = null, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("createClubSubscription", alias, clubSubscriptionQueryBuilder, new GraphQlDirective?[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptCreateClubSubscription() => ExceptField("createClubSubscription");

        public MutationQueryBuilder WithCreateEvent(EventQueryBuilder eventQueryBuilder, QueryBuilderParameter<CreateEventRequestInput?>? request = null, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("createEvent", alias, eventQueryBuilder, new GraphQlDirective?[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptCreateEvent() => ExceptField("createEvent");

        public MutationQueryBuilder WithCreateRoom(RoomQueryBuilder roomQueryBuilder, QueryBuilderParameter<CreateRoomRequestInput?>? request = null, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("createRoom", alias, roomQueryBuilder, new GraphQlDirective?[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptCreateRoom() => ExceptField("createRoom");

        public MutationQueryBuilder WithCreateTemplate1(Template1QueryBuilder template1QueryBuilder, QueryBuilderParameter<CreateTemplate1RequestInput?>? request = null, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("createTemplate1", alias, template1QueryBuilder, new GraphQlDirective?[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptCreateTemplate1() => ExceptField("createTemplate1");

        public MutationQueryBuilder WithCreateUser(IdentityResponseQueryBuilder identityResponseQueryBuilder, QueryBuilderParameter<CreateUserRequestInput?>? request = null, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("createUser", alias, identityResponseQueryBuilder, new GraphQlDirective?[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptCreateUser() => ExceptField("createUser");

        public MutationQueryBuilder WithDeleteClub(ClubQueryBuilder clubQueryBuilder, QueryBuilderParameter<object> clubId, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "clubId", ArgumentValue = clubId} );
            return WithObjectField("deleteClub", alias, clubQueryBuilder, new GraphQlDirective?[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptDeleteClub() => ExceptField("deleteClub");

        public MutationQueryBuilder WithDeleteClubMember(ClubMemberQueryBuilder clubMemberQueryBuilder, QueryBuilderParameter<object> clubId, QueryBuilderParameter<object> userId, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "clubId", ArgumentValue = clubId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "userId", ArgumentValue = userId} );
            return WithObjectField("deleteClubMember", alias, clubMemberQueryBuilder, new GraphQlDirective?[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptDeleteClubMember() => ExceptField("deleteClubMember");

        public MutationQueryBuilder WithDeleteRoom(RoomQueryBuilder roomQueryBuilder, QueryBuilderParameter<object> id, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("deleteRoom", alias, roomQueryBuilder, new GraphQlDirective?[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptDeleteRoom() => ExceptField("deleteRoom");

        public MutationQueryBuilder WithDeleteTemplate1(Template1QueryBuilder template1QueryBuilder, QueryBuilderParameter<object> id, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("deleteTemplate1", alias, template1QueryBuilder, new GraphQlDirective?[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptDeleteTemplate1() => ExceptField("deleteTemplate1");

        public MutationQueryBuilder WithEditUser(IdentityApplicationUserQueryBuilder identityApplicationUserQueryBuilder, QueryBuilderParameter<EditUserRequestInput?>? request = null, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("editUser", alias, identityApplicationUserQueryBuilder, new GraphQlDirective?[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptEditUser() => ExceptField("editUser");

        public MutationQueryBuilder WithLoginUser(IdentityResponseQueryBuilder identityResponseQueryBuilder, QueryBuilderParameter<LoginUserRequestInput?>? request = null, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("loginUser", alias, identityResponseQueryBuilder, new GraphQlDirective?[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptLoginUser() => ExceptField("loginUser");

        public MutationQueryBuilder WithRemoveInstructor(ClubQueryBuilder clubQueryBuilder, QueryBuilderParameter<object> clubId, QueryBuilderParameter<object> instructorId, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "clubId", ArgumentValue = clubId} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "instructorId", ArgumentValue = instructorId} );
            return WithObjectField("removeInstructor", alias, clubQueryBuilder, new GraphQlDirective?[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptRemoveInstructor() => ExceptField("removeInstructor");

        public MutationQueryBuilder WithSignUpFreeEvent(QueryBuilderParameter<object> eventId, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "eventId", ArgumentValue = eventId} );
            return WithScalarField("signUpFreeEvent", alias, new GraphQlDirective?[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptSignUpFreeEvent() => ExceptField("signUpFreeEvent");

        public MutationQueryBuilder WithUpdateClub(ClubQueryBuilder clubQueryBuilder, QueryBuilderParameter<object> clubId, QueryBuilderParameter<UpdateClubRequestInput?>? request = null, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "clubId", ArgumentValue = clubId} );
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("updateClub", alias, clubQueryBuilder, new GraphQlDirective?[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptUpdateClub() => ExceptField("updateClub");

        public MutationQueryBuilder WithUpdateClubMember(ClubMemberQueryBuilder clubMemberQueryBuilder, QueryBuilderParameter<UpdateClubMemberRequestInput?>? request = null, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("updateClubMember", alias, clubMemberQueryBuilder, new GraphQlDirective?[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptUpdateClubMember() => ExceptField("updateClubMember");

        public MutationQueryBuilder WithUpdateClubSubscription(ClubSubscriptionQueryBuilder clubSubscriptionQueryBuilder, QueryBuilderParameter<object> id, QueryBuilderParameter<UpdateClubSubscriptionRequestInput?>? request = null, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("updateClubSubscription", alias, clubSubscriptionQueryBuilder, new GraphQlDirective?[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptUpdateClubSubscription() => ExceptField("updateClubSubscription");

        public MutationQueryBuilder WithUpdateEvent(EventQueryBuilder eventQueryBuilder, QueryBuilderParameter<object> eventId, QueryBuilderParameter<UpdateEventRequestInput?>? request = null, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "eventId", ArgumentValue = eventId} );
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("updateEvent", alias, eventQueryBuilder, new GraphQlDirective?[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptUpdateEvent() => ExceptField("updateEvent");

        public MutationQueryBuilder WithUpdateRoom(RoomQueryBuilder roomQueryBuilder, QueryBuilderParameter<object> id, QueryBuilderParameter<UpdateRoomRequestInput?>? request = null, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("updateRoom", alias, roomQueryBuilder, new GraphQlDirective?[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptUpdateRoom() => ExceptField("updateRoom");

        public MutationQueryBuilder WithUpdateTemplate1(Template1QueryBuilder template1QueryBuilder, QueryBuilderParameter<object> id, QueryBuilderParameter<UpdateTemplate1RequestInput?>? request = null, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            if (request != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "request", ArgumentValue = request} );

            return WithObjectField("updateTemplate1", alias, template1QueryBuilder, new GraphQlDirective?[] { skip, include }, args);
        }

        public MutationQueryBuilder ExceptUpdateTemplate1() => ExceptField("updateTemplate1");
    }

    public class Template1QueryBuilder : GraphQlQueryBuilder<Template1QueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "name" },
            new FieldMetadata { Name = "template1Id", IsComplex = true },
            new FieldMetadata { Name = "validate", IsComplex = true, QueryBuilderType = typeof(Template1ValidationResultQueryBuilder) }
        };

        protected override string TypeName { get; } = "Template1";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public Template1QueryBuilder WithName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("name", alias, new GraphQlDirective?[] { skip, include });

        public Template1QueryBuilder ExceptName() => ExceptField("name");

        public Template1QueryBuilder WithTemplate1Id(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("template1Id", alias, new GraphQlDirective?[] { skip, include });

        public Template1QueryBuilder ExceptTemplate1Id() => ExceptField("template1Id");

        public Template1QueryBuilder WithValidate(Template1ValidationResultQueryBuilder template1ValidationResultQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("validate", alias, template1ValidationResultQueryBuilder, new GraphQlDirective?[] { skip, include });

        public Template1QueryBuilder ExceptValidate() => ExceptField("validate");
    }

    public class Template1ValidationResultQueryBuilder : GraphQlQueryBuilder<Template1ValidationResultQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "errorMessage" },
            new FieldMetadata { Name = "memberNames", IsComplex = true }
        };

        protected override string TypeName { get; } = "template1_ValidationResult";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public Template1ValidationResultQueryBuilder WithErrorMessage(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("errorMessage", alias, new GraphQlDirective?[] { skip, include });

        public Template1ValidationResultQueryBuilder ExceptErrorMessage() => ExceptField("errorMessage");

        public Template1ValidationResultQueryBuilder WithMemberNames(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("memberNames", alias, new GraphQlDirective?[] { skip, include });

        public Template1ValidationResultQueryBuilder ExceptMemberNames() => ExceptField("memberNames");
    }

    public class IdentityApplicationUserQueryBuilder : GraphQlQueryBuilder<IdentityApplicationUserQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "accessFailedCount" },
            new FieldMetadata { Name = "birthDate", IsComplex = true },
            new FieldMetadata { Name = "concurrencyStamp" },
            new FieldMetadata { Name = "email" },
            new FieldMetadata { Name = "emailConfirmed" },
            new FieldMetadata { Name = "id" },
            new FieldMetadata { Name = "lockoutEnabled" },
            new FieldMetadata { Name = "lockoutEnd", IsComplex = true },
            new FieldMetadata { Name = "name" },
            new FieldMetadata { Name = "normalizedEmail" },
            new FieldMetadata { Name = "normalizedUserName" },
            new FieldMetadata { Name = "passwordHash" },
            new FieldMetadata { Name = "phoneNumber" },
            new FieldMetadata { Name = "phoneNumberConfirmed" },
            new FieldMetadata { Name = "securityStamp" },
            new FieldMetadata { Name = "twoFactorEnabled" },
            new FieldMetadata { Name = "userName" }
        };

        protected override string TypeName { get; } = "identity_ApplicationUser";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public IdentityApplicationUserQueryBuilder WithAccessFailedCount(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("accessFailedCount", alias, new GraphQlDirective?[] { skip, include });

        public IdentityApplicationUserQueryBuilder ExceptAccessFailedCount() => ExceptField("accessFailedCount");

        public IdentityApplicationUserQueryBuilder WithBirthDate(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("birthDate", alias, new GraphQlDirective?[] { skip, include });

        public IdentityApplicationUserQueryBuilder ExceptBirthDate() => ExceptField("birthDate");

        public IdentityApplicationUserQueryBuilder WithConcurrencyStamp(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("concurrencyStamp", alias, new GraphQlDirective?[] { skip, include });

        public IdentityApplicationUserQueryBuilder ExceptConcurrencyStamp() => ExceptField("concurrencyStamp");

        public IdentityApplicationUserQueryBuilder WithEmail(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("email", alias, new GraphQlDirective?[] { skip, include });

        public IdentityApplicationUserQueryBuilder ExceptEmail() => ExceptField("email");

        public IdentityApplicationUserQueryBuilder WithEmailConfirmed(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("emailConfirmed", alias, new GraphQlDirective?[] { skip, include });

        public IdentityApplicationUserQueryBuilder ExceptEmailConfirmed() => ExceptField("emailConfirmed");

        public IdentityApplicationUserQueryBuilder WithId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("id", alias, new GraphQlDirective?[] { skip, include });

        public IdentityApplicationUserQueryBuilder ExceptId() => ExceptField("id");

        public IdentityApplicationUserQueryBuilder WithLockoutEnabled(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("lockoutEnabled", alias, new GraphQlDirective?[] { skip, include });

        public IdentityApplicationUserQueryBuilder ExceptLockoutEnabled() => ExceptField("lockoutEnabled");

        public IdentityApplicationUserQueryBuilder WithLockoutEnd(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("lockoutEnd", alias, new GraphQlDirective?[] { skip, include });

        public IdentityApplicationUserQueryBuilder ExceptLockoutEnd() => ExceptField("lockoutEnd");

        public IdentityApplicationUserQueryBuilder WithName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("name", alias, new GraphQlDirective?[] { skip, include });

        public IdentityApplicationUserQueryBuilder ExceptName() => ExceptField("name");

        public IdentityApplicationUserQueryBuilder WithNormalizedEmail(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("normalizedEmail", alias, new GraphQlDirective?[] { skip, include });

        public IdentityApplicationUserQueryBuilder ExceptNormalizedEmail() => ExceptField("normalizedEmail");

        public IdentityApplicationUserQueryBuilder WithNormalizedUserName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("normalizedUserName", alias, new GraphQlDirective?[] { skip, include });

        public IdentityApplicationUserQueryBuilder ExceptNormalizedUserName() => ExceptField("normalizedUserName");

        public IdentityApplicationUserQueryBuilder WithPasswordHash(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("passwordHash", alias, new GraphQlDirective?[] { skip, include });

        public IdentityApplicationUserQueryBuilder ExceptPasswordHash() => ExceptField("passwordHash");

        public IdentityApplicationUserQueryBuilder WithPhoneNumber(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("phoneNumber", alias, new GraphQlDirective?[] { skip, include });

        public IdentityApplicationUserQueryBuilder ExceptPhoneNumber() => ExceptField("phoneNumber");

        public IdentityApplicationUserQueryBuilder WithPhoneNumberConfirmed(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("phoneNumberConfirmed", alias, new GraphQlDirective?[] { skip, include });

        public IdentityApplicationUserQueryBuilder ExceptPhoneNumberConfirmed() => ExceptField("phoneNumberConfirmed");

        public IdentityApplicationUserQueryBuilder WithSecurityStamp(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("securityStamp", alias, new GraphQlDirective?[] { skip, include });

        public IdentityApplicationUserQueryBuilder ExceptSecurityStamp() => ExceptField("securityStamp");

        public IdentityApplicationUserQueryBuilder WithTwoFactorEnabled(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("twoFactorEnabled", alias, new GraphQlDirective?[] { skip, include });

        public IdentityApplicationUserQueryBuilder ExceptTwoFactorEnabled() => ExceptField("twoFactorEnabled");

        public IdentityApplicationUserQueryBuilder WithUserName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("userName", alias, new GraphQlDirective?[] { skip, include });

        public IdentityApplicationUserQueryBuilder ExceptUserName() => ExceptField("userName");
    }

    public class IdentityResponseQueryBuilder : GraphQlQueryBuilder<IdentityResponseQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "token" },
            new FieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(IdentityApplicationUserQueryBuilder) }
        };

        protected override string TypeName { get; } = "identity_Response";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public IdentityResponseQueryBuilder WithToken(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("token", alias, new GraphQlDirective?[] { skip, include });

        public IdentityResponseQueryBuilder ExceptToken() => ExceptField("token");

        public IdentityResponseQueryBuilder WithUser(IdentityApplicationUserQueryBuilder identityApplicationUserQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("user", alias, identityApplicationUserQueryBuilder, new GraphQlDirective?[] { skip, include });

        public IdentityResponseQueryBuilder ExceptUser() => ExceptField("user");
    }

    public class ClubQueryBuilder : GraphQlQueryBuilder<ClubQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "accountNumber" },
            new FieldMetadata { Name = "address" },
            new FieldMetadata { Name = "adminId", IsComplex = true },
            new FieldMetadata { Name = "clubId", IsComplex = true },
            new FieldMetadata { Name = "description" },
            new FieldMetadata { Name = "instructorIds", IsComplex = true },
            new FieldMetadata { Name = "name" },
            new FieldMetadata { Name = "phoneNumber" },
            new FieldMetadata { Name = "registrationNumber" },
            new FieldMetadata { Name = "validate", IsComplex = true, QueryBuilderType = typeof(ClubValidationResultQueryBuilder) }
        };

        protected override string TypeName { get; } = "Club";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public ClubQueryBuilder WithAccountNumber(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("accountNumber", alias, new GraphQlDirective?[] { skip, include });

        public ClubQueryBuilder ExceptAccountNumber() => ExceptField("accountNumber");

        public ClubQueryBuilder WithAddress(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("address", alias, new GraphQlDirective?[] { skip, include });

        public ClubQueryBuilder ExceptAddress() => ExceptField("address");

        public ClubQueryBuilder WithAdminId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("adminId", alias, new GraphQlDirective?[] { skip, include });

        public ClubQueryBuilder ExceptAdminId() => ExceptField("adminId");

        public ClubQueryBuilder WithClubId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("clubId", alias, new GraphQlDirective?[] { skip, include });

        public ClubQueryBuilder ExceptClubId() => ExceptField("clubId");

        public ClubQueryBuilder WithDescription(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("description", alias, new GraphQlDirective?[] { skip, include });

        public ClubQueryBuilder ExceptDescription() => ExceptField("description");

        public ClubQueryBuilder WithInstructorIds(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("instructorIds", alias, new GraphQlDirective?[] { skip, include });

        public ClubQueryBuilder ExceptInstructorIds() => ExceptField("instructorIds");

        public ClubQueryBuilder WithName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("name", alias, new GraphQlDirective?[] { skip, include });

        public ClubQueryBuilder ExceptName() => ExceptField("name");

        public ClubQueryBuilder WithPhoneNumber(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("phoneNumber", alias, new GraphQlDirective?[] { skip, include });

        public ClubQueryBuilder ExceptPhoneNumber() => ExceptField("phoneNumber");

        public ClubQueryBuilder WithRegistrationNumber(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("registrationNumber", alias, new GraphQlDirective?[] { skip, include });

        public ClubQueryBuilder ExceptRegistrationNumber() => ExceptField("registrationNumber");

        public ClubQueryBuilder WithValidate(ClubValidationResultQueryBuilder clubValidationResultQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("validate", alias, clubValidationResultQueryBuilder, new GraphQlDirective?[] { skip, include });

        public ClubQueryBuilder ExceptValidate() => ExceptField("validate");
    }

    public class ClubValidationResultQueryBuilder : GraphQlQueryBuilder<ClubValidationResultQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "errorMessage" },
            new FieldMetadata { Name = "memberNames", IsComplex = true }
        };

        protected override string TypeName { get; } = "club_ValidationResult";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public ClubValidationResultQueryBuilder WithErrorMessage(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("errorMessage", alias, new GraphQlDirective?[] { skip, include });

        public ClubValidationResultQueryBuilder ExceptErrorMessage() => ExceptField("errorMessage");

        public ClubValidationResultQueryBuilder WithMemberNames(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("memberNames", alias, new GraphQlDirective?[] { skip, include });

        public ClubValidationResultQueryBuilder ExceptMemberNames() => ExceptField("memberNames");
    }

    public class ClubSubscriptionQueryBuilder : GraphQlQueryBuilder<ClubSubscriptionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "club", IsComplex = true, QueryBuilderType = typeof(SubscriptionClubQueryBuilder) },
            new FieldMetadata { Name = "clubId", IsComplex = true },
            new FieldMetadata { Name = "clubSubscriptionId", IsComplex = true },
            new FieldMetadata { Name = "name" },
            new FieldMetadata { Name = "price" }
        };

        protected override string TypeName { get; } = "ClubSubscription";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public ClubSubscriptionQueryBuilder WithClub(SubscriptionClubQueryBuilder subscriptionClubQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("club", alias, subscriptionClubQueryBuilder, new GraphQlDirective?[] { skip, include });

        public ClubSubscriptionQueryBuilder ExceptClub() => ExceptField("club");

        public ClubSubscriptionQueryBuilder WithClubId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("clubId", alias, new GraphQlDirective?[] { skip, include });

        public ClubSubscriptionQueryBuilder ExceptClubId() => ExceptField("clubId");

        public ClubSubscriptionQueryBuilder WithClubSubscriptionId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("clubSubscriptionId", alias, new GraphQlDirective?[] { skip, include });

        public ClubSubscriptionQueryBuilder ExceptClubSubscriptionId() => ExceptField("clubSubscriptionId");

        public ClubSubscriptionQueryBuilder WithName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("name", alias, new GraphQlDirective?[] { skip, include });

        public ClubSubscriptionQueryBuilder ExceptName() => ExceptField("name");

        public ClubSubscriptionQueryBuilder WithPrice(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("price", alias, new GraphQlDirective?[] { skip, include });

        public ClubSubscriptionQueryBuilder ExceptPrice() => ExceptField("price");
    }

    public class SubscriptionClubQueryBuilder : GraphQlQueryBuilder<SubscriptionClubQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "clubId", IsComplex = true },
            new FieldMetadata { Name = "subscriptions", IsComplex = true, QueryBuilderType = typeof(ClubSubscriptionQueryBuilder) }
        };

        protected override string TypeName { get; } = "subscription_Club";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public SubscriptionClubQueryBuilder WithClubId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("clubId", alias, new GraphQlDirective?[] { skip, include });

        public SubscriptionClubQueryBuilder ExceptClubId() => ExceptField("clubId");

        public SubscriptionClubQueryBuilder WithSubscriptions(ClubSubscriptionQueryBuilder clubSubscriptionQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("subscriptions", alias, clubSubscriptionQueryBuilder, new GraphQlDirective?[] { skip, include });

        public SubscriptionClubQueryBuilder ExceptSubscriptions() => ExceptField("subscriptions");
    }

    public class ClubMemberQueryBuilder : GraphQlQueryBuilder<ClubMemberQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "clubId", IsComplex = true },
            new FieldMetadata { Name = "clubSubscriptionId", IsComplex = true },
            new FieldMetadata { Name = "userId", IsComplex = true },
            new FieldMetadata { Name = "validate", IsComplex = true, QueryBuilderType = typeof(ClubmemberValidationResultQueryBuilder) }
        };

        protected override string TypeName { get; } = "ClubMember";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public ClubMemberQueryBuilder WithClubId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("clubId", alias, new GraphQlDirective?[] { skip, include });

        public ClubMemberQueryBuilder ExceptClubId() => ExceptField("clubId");

        public ClubMemberQueryBuilder WithClubSubscriptionId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("clubSubscriptionId", alias, new GraphQlDirective?[] { skip, include });

        public ClubMemberQueryBuilder ExceptClubSubscriptionId() => ExceptField("clubSubscriptionId");

        public ClubMemberQueryBuilder WithUserId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("userId", alias, new GraphQlDirective?[] { skip, include });

        public ClubMemberQueryBuilder ExceptUserId() => ExceptField("userId");

        public ClubMemberQueryBuilder WithValidate(ClubmemberValidationResultQueryBuilder clubmemberValidationResultQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("validate", alias, clubmemberValidationResultQueryBuilder, new GraphQlDirective?[] { skip, include });

        public ClubMemberQueryBuilder ExceptValidate() => ExceptField("validate");
    }

    public class ClubmemberClubSubscriptionQueryBuilder : GraphQlQueryBuilder<ClubmemberClubSubscriptionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "clubId", IsComplex = true },
            new FieldMetadata { Name = "clubMembers", IsComplex = true, QueryBuilderType = typeof(ClubMemberQueryBuilder) },
            new FieldMetadata { Name = "clubSubscriptionId", IsComplex = true }
        };

        protected override string TypeName { get; } = "clubmember_ClubSubscription";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public ClubmemberClubSubscriptionQueryBuilder WithClubId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("clubId", alias, new GraphQlDirective?[] { skip, include });

        public ClubmemberClubSubscriptionQueryBuilder ExceptClubId() => ExceptField("clubId");

        public ClubmemberClubSubscriptionQueryBuilder WithClubMembers(ClubMemberQueryBuilder clubMemberQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("clubMembers", alias, clubMemberQueryBuilder, new GraphQlDirective?[] { skip, include });

        public ClubmemberClubSubscriptionQueryBuilder ExceptClubMembers() => ExceptField("clubMembers");

        public ClubmemberClubSubscriptionQueryBuilder WithClubSubscriptionId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("clubSubscriptionId", alias, new GraphQlDirective?[] { skip, include });

        public ClubmemberClubSubscriptionQueryBuilder ExceptClubSubscriptionId() => ExceptField("clubSubscriptionId");
    }

    public class ClubmemberValidationResultQueryBuilder : GraphQlQueryBuilder<ClubmemberValidationResultQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "errorMessage" },
            new FieldMetadata { Name = "memberNames", IsComplex = true }
        };

        protected override string TypeName { get; } = "clubmember_ValidationResult";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public ClubmemberValidationResultQueryBuilder WithErrorMessage(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("errorMessage", alias, new GraphQlDirective?[] { skip, include });

        public ClubmemberValidationResultQueryBuilder ExceptErrorMessage() => ExceptField("errorMessage");

        public ClubmemberValidationResultQueryBuilder WithMemberNames(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("memberNames", alias, new GraphQlDirective?[] { skip, include });

        public ClubmemberValidationResultQueryBuilder ExceptMemberNames() => ExceptField("memberNames");
    }

    public class RoomQueryBuilder : GraphQlQueryBuilder<RoomQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "bookings", IsComplex = true, QueryBuilderType = typeof(RoomBookingQueryBuilder) },
            new FieldMetadata { Name = "clubId", IsComplex = true },
            new FieldMetadata { Name = "name" },
            new FieldMetadata { Name = "roomId", IsComplex = true },
            new FieldMetadata { Name = "validate", IsComplex = true, QueryBuilderType = typeof(RoomValidationResultQueryBuilder) }
        };

        protected override string TypeName { get; } = "Room";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public RoomQueryBuilder WithBookings(RoomBookingQueryBuilder roomBookingQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("bookings", alias, roomBookingQueryBuilder, new GraphQlDirective?[] { skip, include });

        public RoomQueryBuilder ExceptBookings() => ExceptField("bookings");

        public RoomQueryBuilder WithClubId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("clubId", alias, new GraphQlDirective?[] { skip, include });

        public RoomQueryBuilder ExceptClubId() => ExceptField("clubId");

        public RoomQueryBuilder WithName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("name", alias, new GraphQlDirective?[] { skip, include });

        public RoomQueryBuilder ExceptName() => ExceptField("name");

        public RoomQueryBuilder WithRoomId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("roomId", alias, new GraphQlDirective?[] { skip, include });

        public RoomQueryBuilder ExceptRoomId() => ExceptField("roomId");

        public RoomQueryBuilder WithValidate(RoomValidationResultQueryBuilder roomValidationResultQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("validate", alias, roomValidationResultQueryBuilder, new GraphQlDirective?[] { skip, include });

        public RoomQueryBuilder ExceptValidate() => ExceptField("validate");
    }

    public class RoomBookingQueryBuilder : GraphQlQueryBuilder<RoomBookingQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "endTime", IsComplex = true },
            new FieldMetadata { Name = "eventId", IsComplex = true },
            new FieldMetadata { Name = "name" },
            new FieldMetadata { Name = "roomId", IsComplex = true },
            new FieldMetadata { Name = "startTime", IsComplex = true },
            new FieldMetadata { Name = "validate", IsComplex = true, QueryBuilderType = typeof(RoomValidationResultQueryBuilder) }
        };

        protected override string TypeName { get; } = "room_Booking";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public RoomBookingQueryBuilder WithEndTime(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("endTime", alias, new GraphQlDirective?[] { skip, include });

        public RoomBookingQueryBuilder ExceptEndTime() => ExceptField("endTime");

        public RoomBookingQueryBuilder WithEventId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("eventId", alias, new GraphQlDirective?[] { skip, include });

        public RoomBookingQueryBuilder ExceptEventId() => ExceptField("eventId");

        public RoomBookingQueryBuilder WithName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("name", alias, new GraphQlDirective?[] { skip, include });

        public RoomBookingQueryBuilder ExceptName() => ExceptField("name");

        public RoomBookingQueryBuilder WithRoomId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("roomId", alias, new GraphQlDirective?[] { skip, include });

        public RoomBookingQueryBuilder ExceptRoomId() => ExceptField("roomId");

        public RoomBookingQueryBuilder WithStartTime(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("startTime", alias, new GraphQlDirective?[] { skip, include });

        public RoomBookingQueryBuilder ExceptStartTime() => ExceptField("startTime");

        public RoomBookingQueryBuilder WithValidate(RoomValidationResultQueryBuilder roomValidationResultQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("validate", alias, roomValidationResultQueryBuilder, new GraphQlDirective?[] { skip, include });

        public RoomBookingQueryBuilder ExceptValidate() => ExceptField("validate");
    }

    public class RoomClubQueryBuilder : GraphQlQueryBuilder<RoomClubQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "clubId", IsComplex = true },
            new FieldMetadata { Name = "rooms", IsComplex = true, QueryBuilderType = typeof(RoomQueryBuilder) },
            new FieldMetadata { Name = "validate", IsComplex = true, QueryBuilderType = typeof(RoomValidationResultQueryBuilder) }
        };

        protected override string TypeName { get; } = "room_Club";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public RoomClubQueryBuilder WithClubId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("clubId", alias, new GraphQlDirective?[] { skip, include });

        public RoomClubQueryBuilder ExceptClubId() => ExceptField("clubId");

        public RoomClubQueryBuilder WithRooms(RoomQueryBuilder roomQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("rooms", alias, roomQueryBuilder, new GraphQlDirective?[] { skip, include });

        public RoomClubQueryBuilder ExceptRooms() => ExceptField("rooms");

        public RoomClubQueryBuilder WithValidate(RoomValidationResultQueryBuilder roomValidationResultQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("validate", alias, roomValidationResultQueryBuilder, new GraphQlDirective?[] { skip, include });

        public RoomClubQueryBuilder ExceptValidate() => ExceptField("validate");
    }

    public class RoomValidationResultQueryBuilder : GraphQlQueryBuilder<RoomValidationResultQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "errorMessage" },
            new FieldMetadata { Name = "memberNames", IsComplex = true }
        };

        protected override string TypeName { get; } = "room_ValidationResult";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public RoomValidationResultQueryBuilder WithErrorMessage(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("errorMessage", alias, new GraphQlDirective?[] { skip, include });

        public RoomValidationResultQueryBuilder ExceptErrorMessage() => ExceptField("errorMessage");

        public RoomValidationResultQueryBuilder WithMemberNames(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("memberNames", alias, new GraphQlDirective?[] { skip, include });

        public RoomValidationResultQueryBuilder ExceptMemberNames() => ExceptField("memberNames");
    }

    public class EventQueryBuilder : GraphQlQueryBuilder<EventQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "clubId", IsComplex = true },
            new FieldMetadata { Name = "description" },
            new FieldMetadata { Name = "endTime", IsComplex = true },
            new FieldMetadata { Name = "eventId", IsComplex = true },
            new FieldMetadata { Name = "eventPrices", IsComplex = true, QueryBuilderType = typeof(EventPriceQueryBuilder) },
            new FieldMetadata { Name = "eventType" },
            new FieldMetadata { Name = "instructorForEvents", IsComplex = true, QueryBuilderType = typeof(InstructorForEventQueryBuilder) },
            new FieldMetadata { Name = "locations", IsComplex = true, QueryBuilderType = typeof(RoomEventQueryBuilder) },
            new FieldMetadata { Name = "name" },
            new FieldMetadata { Name = "startTime", IsComplex = true },
            new FieldMetadata { Name = "status" },
            new FieldMetadata { Name = "validate", IsComplex = true, QueryBuilderType = typeof(EventValidationResultQueryBuilder) }
        };

        protected override string TypeName { get; } = "Event";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public EventQueryBuilder WithClubId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("clubId", alias, new GraphQlDirective?[] { skip, include });

        public EventQueryBuilder ExceptClubId() => ExceptField("clubId");

        public EventQueryBuilder WithDescription(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("description", alias, new GraphQlDirective?[] { skip, include });

        public EventQueryBuilder ExceptDescription() => ExceptField("description");

        public EventQueryBuilder WithEndTime(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("endTime", alias, new GraphQlDirective?[] { skip, include });

        public EventQueryBuilder ExceptEndTime() => ExceptField("endTime");

        public EventQueryBuilder WithEventId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("eventId", alias, new GraphQlDirective?[] { skip, include });

        public EventQueryBuilder ExceptEventId() => ExceptField("eventId");

        public EventQueryBuilder WithEventPrices(EventPriceQueryBuilder eventPriceQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("eventPrices", alias, eventPriceQueryBuilder, new GraphQlDirective?[] { skip, include });

        public EventQueryBuilder ExceptEventPrices() => ExceptField("eventPrices");

        public EventQueryBuilder WithEventType(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("eventType", alias, new GraphQlDirective?[] { skip, include });

        public EventQueryBuilder ExceptEventType() => ExceptField("eventType");

        public EventQueryBuilder WithInstructorForEvents(InstructorForEventQueryBuilder instructorForEventQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("instructorForEvents", alias, instructorForEventQueryBuilder, new GraphQlDirective?[] { skip, include });

        public EventQueryBuilder ExceptInstructorForEvents() => ExceptField("instructorForEvents");

        public EventQueryBuilder WithLocations(RoomEventQueryBuilder roomEventQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("locations", alias, roomEventQueryBuilder, new GraphQlDirective?[] { skip, include });

        public EventQueryBuilder ExceptLocations() => ExceptField("locations");

        public EventQueryBuilder WithName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("name", alias, new GraphQlDirective?[] { skip, include });

        public EventQueryBuilder ExceptName() => ExceptField("name");

        public EventQueryBuilder WithStartTime(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("startTime", alias, new GraphQlDirective?[] { skip, include });

        public EventQueryBuilder ExceptStartTime() => ExceptField("startTime");

        public EventQueryBuilder WithStatus(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("status", alias, new GraphQlDirective?[] { skip, include });

        public EventQueryBuilder ExceptStatus() => ExceptField("status");

        public EventQueryBuilder WithValidate(EventValidationResultQueryBuilder eventValidationResultQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("validate", alias, eventValidationResultQueryBuilder, new GraphQlDirective?[] { skip, include });

        public EventQueryBuilder ExceptValidate() => ExceptField("validate");
    }

    public class EventValidationResultQueryBuilder : GraphQlQueryBuilder<EventValidationResultQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "errorMessage" },
            new FieldMetadata { Name = "memberNames", IsComplex = true }
        };

        protected override string TypeName { get; } = "event_ValidationResult";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public EventValidationResultQueryBuilder WithErrorMessage(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("errorMessage", alias, new GraphQlDirective?[] { skip, include });

        public EventValidationResultQueryBuilder ExceptErrorMessage() => ExceptField("errorMessage");

        public EventValidationResultQueryBuilder WithMemberNames(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("memberNames", alias, new GraphQlDirective?[] { skip, include });

        public EventValidationResultQueryBuilder ExceptMemberNames() => ExceptField("memberNames");
    }

    public class EventPriceQueryBuilder : GraphQlQueryBuilder<EventPriceQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "clubSubscription", IsComplex = true, QueryBuilderType = typeof(EventClubSubscriptionQueryBuilder) },
            new FieldMetadata { Name = "clubSubscriptionId", IsComplex = true },
            new FieldMetadata { Name = "event", IsComplex = true, QueryBuilderType = typeof(EventQueryBuilder) },
            new FieldMetadata { Name = "eventId", IsComplex = true },
            new FieldMetadata { Name = "price" },
            new FieldMetadata { Name = "validate", IsComplex = true, QueryBuilderType = typeof(EventValidationResultQueryBuilder) }
        };

        protected override string TypeName { get; } = "EventPrice";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public EventPriceQueryBuilder WithClubSubscription(EventClubSubscriptionQueryBuilder eventClubSubscriptionQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("clubSubscription", alias, eventClubSubscriptionQueryBuilder, new GraphQlDirective?[] { skip, include });

        public EventPriceQueryBuilder ExceptClubSubscription() => ExceptField("clubSubscription");

        public EventPriceQueryBuilder WithClubSubscriptionId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("clubSubscriptionId", alias, new GraphQlDirective?[] { skip, include });

        public EventPriceQueryBuilder ExceptClubSubscriptionId() => ExceptField("clubSubscriptionId");

        public EventPriceQueryBuilder WithEvent(EventQueryBuilder eventQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("event", alias, eventQueryBuilder, new GraphQlDirective?[] { skip, include });

        public EventPriceQueryBuilder ExceptEvent() => ExceptField("event");

        public EventPriceQueryBuilder WithEventId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("eventId", alias, new GraphQlDirective?[] { skip, include });

        public EventPriceQueryBuilder ExceptEventId() => ExceptField("eventId");

        public EventPriceQueryBuilder WithPrice(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("price", alias, new GraphQlDirective?[] { skip, include });

        public EventPriceQueryBuilder ExceptPrice() => ExceptField("price");

        public EventPriceQueryBuilder WithValidate(EventValidationResultQueryBuilder eventValidationResultQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("validate", alias, eventValidationResultQueryBuilder, new GraphQlDirective?[] { skip, include });

        public EventPriceQueryBuilder ExceptValidate() => ExceptField("validate");
    }

    public class RoomEventQueryBuilder : GraphQlQueryBuilder<RoomEventQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "event", IsComplex = true, QueryBuilderType = typeof(EventQueryBuilder) },
            new FieldMetadata { Name = "eventId", IsComplex = true },
            new FieldMetadata { Name = "room", IsComplex = true, QueryBuilderType = typeof(EventRoomQueryBuilder) },
            new FieldMetadata { Name = "roomId", IsComplex = true }
        };

        protected override string TypeName { get; } = "RoomEvent";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public RoomEventQueryBuilder WithEvent(EventQueryBuilder eventQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("event", alias, eventQueryBuilder, new GraphQlDirective?[] { skip, include });

        public RoomEventQueryBuilder ExceptEvent() => ExceptField("event");

        public RoomEventQueryBuilder WithEventId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("eventId", alias, new GraphQlDirective?[] { skip, include });

        public RoomEventQueryBuilder ExceptEventId() => ExceptField("eventId");

        public RoomEventQueryBuilder WithRoom(EventRoomQueryBuilder eventRoomQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("room", alias, eventRoomQueryBuilder, new GraphQlDirective?[] { skip, include });

        public RoomEventQueryBuilder ExceptRoom() => ExceptField("room");

        public RoomEventQueryBuilder WithRoomId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("roomId", alias, new GraphQlDirective?[] { skip, include });

        public RoomEventQueryBuilder ExceptRoomId() => ExceptField("roomId");
    }

    public class InstructorForEventQueryBuilder : GraphQlQueryBuilder<InstructorForEventQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "event", IsComplex = true, QueryBuilderType = typeof(EventQueryBuilder) },
            new FieldMetadata { Name = "eventId", IsComplex = true },
            new FieldMetadata { Name = "instructor", IsComplex = true, QueryBuilderType = typeof(EventInstructorQueryBuilder) },
            new FieldMetadata { Name = "instructorId", IsComplex = true }
        };

        protected override string TypeName { get; } = "InstructorForEvent";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public InstructorForEventQueryBuilder WithEvent(EventQueryBuilder eventQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("event", alias, eventQueryBuilder, new GraphQlDirective?[] { skip, include });

        public InstructorForEventQueryBuilder ExceptEvent() => ExceptField("event");

        public InstructorForEventQueryBuilder WithEventId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("eventId", alias, new GraphQlDirective?[] { skip, include });

        public InstructorForEventQueryBuilder ExceptEventId() => ExceptField("eventId");

        public InstructorForEventQueryBuilder WithInstructor(EventInstructorQueryBuilder eventInstructorQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("instructor", alias, eventInstructorQueryBuilder, new GraphQlDirective?[] { skip, include });

        public InstructorForEventQueryBuilder ExceptInstructor() => ExceptField("instructor");

        public InstructorForEventQueryBuilder WithInstructorId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("instructorId", alias, new GraphQlDirective?[] { skip, include });

        public InstructorForEventQueryBuilder ExceptInstructorId() => ExceptField("instructorId");
    }

    public class EventClubSubscriptionQueryBuilder : GraphQlQueryBuilder<EventClubSubscriptionQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "clubId", IsComplex = true },
            new FieldMetadata { Name = "clubSubscriptionId", IsComplex = true },
            new FieldMetadata { Name = "eventPrices", IsComplex = true, QueryBuilderType = typeof(EventPriceQueryBuilder) }
        };

        protected override string TypeName { get; } = "event_ClubSubscription";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public EventClubSubscriptionQueryBuilder WithClubId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("clubId", alias, new GraphQlDirective?[] { skip, include });

        public EventClubSubscriptionQueryBuilder ExceptClubId() => ExceptField("clubId");

        public EventClubSubscriptionQueryBuilder WithClubSubscriptionId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("clubSubscriptionId", alias, new GraphQlDirective?[] { skip, include });

        public EventClubSubscriptionQueryBuilder ExceptClubSubscriptionId() => ExceptField("clubSubscriptionId");

        public EventClubSubscriptionQueryBuilder WithEventPrices(EventPriceQueryBuilder eventPriceQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("eventPrices", alias, eventPriceQueryBuilder, new GraphQlDirective?[] { skip, include });

        public EventClubSubscriptionQueryBuilder ExceptEventPrices() => ExceptField("eventPrices");
    }

    public class EventRoomQueryBuilder : GraphQlQueryBuilder<EventRoomQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "clubId", IsComplex = true },
            new FieldMetadata { Name = "locations", IsComplex = true, QueryBuilderType = typeof(RoomEventQueryBuilder) },
            new FieldMetadata { Name = "roomId", IsComplex = true }
        };

        protected override string TypeName { get; } = "event_Room";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public EventRoomQueryBuilder WithClubId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("clubId", alias, new GraphQlDirective?[] { skip, include });

        public EventRoomQueryBuilder ExceptClubId() => ExceptField("clubId");

        public EventRoomQueryBuilder WithLocations(RoomEventQueryBuilder roomEventQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("locations", alias, roomEventQueryBuilder, new GraphQlDirective?[] { skip, include });

        public EventRoomQueryBuilder ExceptLocations() => ExceptField("locations");

        public EventRoomQueryBuilder WithRoomId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("roomId", alias, new GraphQlDirective?[] { skip, include });

        public EventRoomQueryBuilder ExceptRoomId() => ExceptField("roomId");
    }

    public class EventInstructorQueryBuilder : GraphQlQueryBuilder<EventInstructorQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "clubId", IsComplex = true },
            new FieldMetadata { Name = "instructorForEvents", IsComplex = true, QueryBuilderType = typeof(InstructorForEventQueryBuilder) },
            new FieldMetadata { Name = "instructorId", IsComplex = true }
        };

        protected override string TypeName { get; } = "event_Instructor";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public EventInstructorQueryBuilder WithClubId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("clubId", alias, new GraphQlDirective?[] { skip, include });

        public EventInstructorQueryBuilder ExceptClubId() => ExceptField("clubId");

        public EventInstructorQueryBuilder WithInstructorForEvents(InstructorForEventQueryBuilder instructorForEventQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("instructorForEvents", alias, instructorForEventQueryBuilder, new GraphQlDirective?[] { skip, include });

        public EventInstructorQueryBuilder ExceptInstructorForEvents() => ExceptField("instructorForEvents");

        public EventInstructorQueryBuilder WithInstructorId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("instructorId", alias, new GraphQlDirective?[] { skip, include });

        public EventInstructorQueryBuilder ExceptInstructorId() => ExceptField("instructorId");
    }

    public class EventParticipantQueryBuilder : GraphQlQueryBuilder<EventParticipantQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "event", IsComplex = true, QueryBuilderType = typeof(EventparticipantEventQueryBuilder) },
            new FieldMetadata { Name = "eventId", IsComplex = true },
            new FieldMetadata { Name = "eventParticipantId", IsComplex = true },
            new FieldMetadata { Name = "userId", IsComplex = true }
        };

        protected override string TypeName { get; } = "EventParticipant";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public EventParticipantQueryBuilder WithEvent(EventparticipantEventQueryBuilder eventparticipantEventQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("event", alias, eventparticipantEventQueryBuilder, new GraphQlDirective?[] { skip, include });

        public EventParticipantQueryBuilder ExceptEvent() => ExceptField("event");

        public EventParticipantQueryBuilder WithEventId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("eventId", alias, new GraphQlDirective?[] { skip, include });

        public EventParticipantQueryBuilder ExceptEventId() => ExceptField("eventId");

        public EventParticipantQueryBuilder WithEventParticipantId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("eventParticipantId", alias, new GraphQlDirective?[] { skip, include });

        public EventParticipantQueryBuilder ExceptEventParticipantId() => ExceptField("eventParticipantId");

        public EventParticipantQueryBuilder WithUserId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("userId", alias, new GraphQlDirective?[] { skip, include });

        public EventParticipantQueryBuilder ExceptUserId() => ExceptField("userId");
    }

    public class EventparticipantEventQueryBuilder : GraphQlQueryBuilder<EventparticipantEventQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "clubId", IsComplex = true },
            new FieldMetadata { Name = "eventId", IsComplex = true },
            new FieldMetadata { Name = "eventParticipants", IsComplex = true, QueryBuilderType = typeof(EventParticipantQueryBuilder) },
            new FieldMetadata { Name = "eventPrices", IsComplex = true, QueryBuilderType = typeof(EventparticipantEventPriceQueryBuilder) },
            new FieldMetadata { Name = "eventType" },
            new FieldMetadata { Name = "isFree" }
        };

        protected override string TypeName { get; } = "eventparticipant_Event";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public EventparticipantEventQueryBuilder WithClubId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("clubId", alias, new GraphQlDirective?[] { skip, include });

        public EventparticipantEventQueryBuilder ExceptClubId() => ExceptField("clubId");

        public EventparticipantEventQueryBuilder WithEventId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("eventId", alias, new GraphQlDirective?[] { skip, include });

        public EventparticipantEventQueryBuilder ExceptEventId() => ExceptField("eventId");

        public EventparticipantEventQueryBuilder WithEventParticipants(EventParticipantQueryBuilder eventParticipantQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("eventParticipants", alias, eventParticipantQueryBuilder, new GraphQlDirective?[] { skip, include });

        public EventparticipantEventQueryBuilder ExceptEventParticipants() => ExceptField("eventParticipants");

        public EventparticipantEventQueryBuilder WithEventPrices(EventparticipantEventPriceQueryBuilder eventparticipantEventPriceQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("eventPrices", alias, eventparticipantEventPriceQueryBuilder, new GraphQlDirective?[] { skip, include });

        public EventparticipantEventQueryBuilder ExceptEventPrices() => ExceptField("eventPrices");

        public EventparticipantEventQueryBuilder WithEventType(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("eventType", alias, new GraphQlDirective?[] { skip, include });

        public EventparticipantEventQueryBuilder ExceptEventType() => ExceptField("eventType");

        public EventparticipantEventQueryBuilder WithIsFree(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("isFree", alias, new GraphQlDirective?[] { skip, include });

        public EventparticipantEventQueryBuilder ExceptIsFree() => ExceptField("isFree");
    }

    public class EventparticipantEventPriceQueryBuilder : GraphQlQueryBuilder<EventparticipantEventPriceQueryBuilder>
    {
        private static readonly FieldMetadata[] AllFieldMetadata =
        {
            new FieldMetadata { Name = "clubSubscriptionId", IsComplex = true },
            new FieldMetadata { Name = "event", IsComplex = true, QueryBuilderType = typeof(EventparticipantEventQueryBuilder) },
            new FieldMetadata { Name = "eventId", IsComplex = true },
            new FieldMetadata { Name = "price" }
        };

        protected override string TypeName { get; } = "eventparticipant_EventPrice";

        public override IReadOnlyList<FieldMetadata> AllFields { get; } = AllFieldMetadata;

        public EventparticipantEventPriceQueryBuilder WithClubSubscriptionId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("clubSubscriptionId", alias, new GraphQlDirective?[] { skip, include });

        public EventparticipantEventPriceQueryBuilder ExceptClubSubscriptionId() => ExceptField("clubSubscriptionId");

        public EventparticipantEventPriceQueryBuilder WithEvent(EventparticipantEventQueryBuilder eventparticipantEventQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("event", alias, eventparticipantEventQueryBuilder, new GraphQlDirective?[] { skip, include });

        public EventparticipantEventPriceQueryBuilder ExceptEvent() => ExceptField("event");

        public EventparticipantEventPriceQueryBuilder WithEventId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("eventId", alias, new GraphQlDirective?[] { skip, include });

        public EventparticipantEventPriceQueryBuilder ExceptEventId() => ExceptField("eventId");

        public EventparticipantEventPriceQueryBuilder WithPrice(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("price", alias, new GraphQlDirective?[] { skip, include });

        public EventparticipantEventPriceQueryBuilder ExceptPrice() => ExceptField("price");
    }
    #endregion

    #region input classes
    public class UpdateTemplate1RequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Name
        {
            get => (QueryBuilderParameter<string?>?)_name.Value;
            set => _name = new InputPropertyInfo { Name = "name", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
        }
    }

    public class CreateTemplate1RequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Name
        {
            get => (QueryBuilderParameter<string?>?)_name.Value;
            set => _name = new InputPropertyInfo { Name = "name", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
        }
    }

    public class LoginUserRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _email;
        private InputPropertyInfo _password;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Email
        {
            get => (QueryBuilderParameter<string?>?)_email.Value;
            set => _email = new InputPropertyInfo { Name = "email", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Password
        {
            get => (QueryBuilderParameter<string?>?)_password.Value;
            set => _password = new InputPropertyInfo { Name = "password", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_email.Name != null) yield return _email;
            if (_password.Name != null) yield return _password;
        }
    }

    public class CreateUserRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _birthDate;
        private InputPropertyInfo _email;
        private InputPropertyInfo _name;
        private InputPropertyInfo _password;
        private InputPropertyInfo _phoneNumber;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? BirthDate
        {
            get => (QueryBuilderParameter<object?>?)_birthDate.Value;
            set => _birthDate = new InputPropertyInfo { Name = "birthDate", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Email
        {
            get => (QueryBuilderParameter<string?>?)_email.Value;
            set => _email = new InputPropertyInfo { Name = "email", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Name
        {
            get => (QueryBuilderParameter<string?>?)_name.Value;
            set => _name = new InputPropertyInfo { Name = "name", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Password
        {
            get => (QueryBuilderParameter<string?>?)_password.Value;
            set => _password = new InputPropertyInfo { Name = "password", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? PhoneNumber
        {
            get => (QueryBuilderParameter<string?>?)_phoneNumber.Value;
            set => _phoneNumber = new InputPropertyInfo { Name = "phoneNumber", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_birthDate.Name != null) yield return _birthDate;
            if (_email.Name != null) yield return _email;
            if (_name.Name != null) yield return _name;
            if (_password.Name != null) yield return _password;
            if (_phoneNumber.Name != null) yield return _phoneNumber;
        }
    }

    public class EditUserRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _phoneNumber;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Name
        {
            get => (QueryBuilderParameter<string?>?)_name.Value;
            set => _name = new InputPropertyInfo { Name = "name", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? PhoneNumber
        {
            get => (QueryBuilderParameter<string?>?)_phoneNumber.Value;
            set => _phoneNumber = new InputPropertyInfo { Name = "phoneNumber", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_phoneNumber.Name != null) yield return _phoneNumber;
        }
    }

    public class UpdateClubRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _accountNumber;
        private InputPropertyInfo _address;
        private InputPropertyInfo _description;
        private InputPropertyInfo _name;
        private InputPropertyInfo _phoneNumber;
        private InputPropertyInfo _registrationNumber;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? AccountNumber
        {
            get => (QueryBuilderParameter<string?>?)_accountNumber.Value;
            set => _accountNumber = new InputPropertyInfo { Name = "accountNumber", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Address
        {
            get => (QueryBuilderParameter<string?>?)_address.Value;
            set => _address = new InputPropertyInfo { Name = "address", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Description
        {
            get => (QueryBuilderParameter<string?>?)_description.Value;
            set => _description = new InputPropertyInfo { Name = "description", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Name
        {
            get => (QueryBuilderParameter<string?>?)_name.Value;
            set => _name = new InputPropertyInfo { Name = "name", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? PhoneNumber
        {
            get => (QueryBuilderParameter<string?>?)_phoneNumber.Value;
            set => _phoneNumber = new InputPropertyInfo { Name = "phoneNumber", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? RegistrationNumber
        {
            get => (QueryBuilderParameter<string?>?)_registrationNumber.Value;
            set => _registrationNumber = new InputPropertyInfo { Name = "registrationNumber", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_accountNumber.Name != null) yield return _accountNumber;
            if (_address.Name != null) yield return _address;
            if (_description.Name != null) yield return _description;
            if (_name.Name != null) yield return _name;
            if (_phoneNumber.Name != null) yield return _phoneNumber;
            if (_registrationNumber.Name != null) yield return _registrationNumber;
        }
    }

    public class CreateClubRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _accountNumber;
        private InputPropertyInfo _address;
        private InputPropertyInfo _description;
        private InputPropertyInfo _locations;
        private InputPropertyInfo _name;
        private InputPropertyInfo _phoneNumber;
        private InputPropertyInfo _registrationNumber;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? AccountNumber
        {
            get => (QueryBuilderParameter<string?>?)_accountNumber.Value;
            set => _accountNumber = new InputPropertyInfo { Name = "accountNumber", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Address
        {
            get => (QueryBuilderParameter<string?>?)_address.Value;
            set => _address = new InputPropertyInfo { Name = "address", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Description
        {
            get => (QueryBuilderParameter<string?>?)_description.Value;
            set => _description = new InputPropertyInfo { Name = "description", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string?>?>))]
        #endif
        public QueryBuilderParameter<ICollection<string?>?>? Locations
        {
            get => (QueryBuilderParameter<ICollection<string?>?>?)_locations.Value;
            set => _locations = new InputPropertyInfo { Name = "locations", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Name
        {
            get => (QueryBuilderParameter<string?>?)_name.Value;
            set => _name = new InputPropertyInfo { Name = "name", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? PhoneNumber
        {
            get => (QueryBuilderParameter<string?>?)_phoneNumber.Value;
            set => _phoneNumber = new InputPropertyInfo { Name = "phoneNumber", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? RegistrationNumber
        {
            get => (QueryBuilderParameter<string?>?)_registrationNumber.Value;
            set => _registrationNumber = new InputPropertyInfo { Name = "registrationNumber", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_accountNumber.Name != null) yield return _accountNumber;
            if (_address.Name != null) yield return _address;
            if (_description.Name != null) yield return _description;
            if (_locations.Name != null) yield return _locations;
            if (_name.Name != null) yield return _name;
            if (_phoneNumber.Name != null) yield return _phoneNumber;
            if (_registrationNumber.Name != null) yield return _registrationNumber;
        }
    }

    public class CreateClubSubscriptionRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clubId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _price;
        private InputPropertyInfo _referenceId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? ClubId
        {
            get => (QueryBuilderParameter<object?>?)_clubId.Value;
            set => _clubId = new InputPropertyInfo { Name = "clubId", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Name
        {
            get => (QueryBuilderParameter<string?>?)_name.Value;
            set => _name = new InputPropertyInfo { Name = "name", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?>? Price
        {
            get => (QueryBuilderParameter<int?>?)_price.Value;
            set => _price = new InputPropertyInfo { Name = "price", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? ReferenceId
        {
            get => (QueryBuilderParameter<object?>?)_referenceId.Value;
            set => _referenceId = new InputPropertyInfo { Name = "referenceId", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clubId.Name != null) yield return _clubId;
            if (_name.Name != null) yield return _name;
            if (_price.Name != null) yield return _price;
            if (_referenceId.Name != null) yield return _referenceId;
        }
    }

    public class UpdateClubSubscriptionRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _price;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Name
        {
            get => (QueryBuilderParameter<string?>?)_name.Value;
            set => _name = new InputPropertyInfo { Name = "name", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?>? Price
        {
            get => (QueryBuilderParameter<int?>?)_price.Value;
            set => _price = new InputPropertyInfo { Name = "price", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_price.Name != null) yield return _price;
        }
    }

    public class UpdateClubMemberRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clubId;
        private InputPropertyInfo _clubSubscriptionId;
        private InputPropertyInfo _userId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? ClubId
        {
            get => (QueryBuilderParameter<object?>?)_clubId.Value;
            set => _clubId = new InputPropertyInfo { Name = "clubId", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? ClubSubscriptionId
        {
            get => (QueryBuilderParameter<object?>?)_clubSubscriptionId.Value;
            set => _clubSubscriptionId = new InputPropertyInfo { Name = "clubSubscriptionId", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? UserId
        {
            get => (QueryBuilderParameter<object?>?)_userId.Value;
            set => _userId = new InputPropertyInfo { Name = "userId", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clubId.Name != null) yield return _clubId;
            if (_clubSubscriptionId.Name != null) yield return _clubSubscriptionId;
            if (_userId.Name != null) yield return _userId;
        }
    }

    public class CreateClubMemberRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clubSubscriptionId;
        private InputPropertyInfo _userId;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? ClubSubscriptionId
        {
            get => (QueryBuilderParameter<object?>?)_clubSubscriptionId.Value;
            set => _clubSubscriptionId = new InputPropertyInfo { Name = "clubSubscriptionId", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? UserId
        {
            get => (QueryBuilderParameter<object?>?)_userId.Value;
            set => _userId = new InputPropertyInfo { Name = "userId", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clubSubscriptionId.Name != null) yield return _clubSubscriptionId;
            if (_userId.Name != null) yield return _userId;
        }
    }

    public class UpdateRoomRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Name
        {
            get => (QueryBuilderParameter<string?>?)_name.Value;
            set => _name = new InputPropertyInfo { Name = "name", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
        }
    }

    public class CreateRoomRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clubId;
        private InputPropertyInfo _name;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? ClubId
        {
            get => (QueryBuilderParameter<object?>?)_clubId.Value;
            set => _clubId = new InputPropertyInfo { Name = "clubId", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Name
        {
            get => (QueryBuilderParameter<string?>?)_name.Value;
            set => _name = new InputPropertyInfo { Name = "name", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clubId.Name != null) yield return _clubId;
            if (_name.Name != null) yield return _name;
        }
    }

    public class UpdateEventRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _description;
        private InputPropertyInfo _endTime;
        private InputPropertyInfo _eventPrices;
        private InputPropertyInfo _instructorForEvents;
        private InputPropertyInfo _locations;
        private InputPropertyInfo _name;
        private InputPropertyInfo _startTime;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Description
        {
            get => (QueryBuilderParameter<string?>?)_description.Value;
            set => _description = new InputPropertyInfo { Name = "description", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? EndTime
        {
            get => (QueryBuilderParameter<object?>?)_endTime.Value;
            set => _endTime = new InputPropertyInfo { Name = "endTime", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<EventPriceRequestInput?>?>))]
        #endif
        public QueryBuilderParameter<ICollection<EventPriceRequestInput?>?>? EventPrices
        {
            get => (QueryBuilderParameter<ICollection<EventPriceRequestInput?>?>?)_eventPrices.Value;
            set => _eventPrices = new InputPropertyInfo { Name = "eventPrices", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<object>?>))]
        #endif
        public QueryBuilderParameter<ICollection<object>?>? InstructorForEvents
        {
            get => (QueryBuilderParameter<ICollection<object>?>?)_instructorForEvents.Value;
            set => _instructorForEvents = new InputPropertyInfo { Name = "instructorForEvents", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<object>?>))]
        #endif
        public QueryBuilderParameter<ICollection<object>?>? Locations
        {
            get => (QueryBuilderParameter<ICollection<object>?>?)_locations.Value;
            set => _locations = new InputPropertyInfo { Name = "locations", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Name
        {
            get => (QueryBuilderParameter<string?>?)_name.Value;
            set => _name = new InputPropertyInfo { Name = "name", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? StartTime
        {
            get => (QueryBuilderParameter<object?>?)_startTime.Value;
            set => _startTime = new InputPropertyInfo { Name = "startTime", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_description.Name != null) yield return _description;
            if (_endTime.Name != null) yield return _endTime;
            if (_eventPrices.Name != null) yield return _eventPrices;
            if (_instructorForEvents.Name != null) yield return _instructorForEvents;
            if (_locations.Name != null) yield return _locations;
            if (_name.Name != null) yield return _name;
            if (_startTime.Name != null) yield return _startTime;
        }
    }

    public class CreateEventRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clubId;
        private InputPropertyInfo _description;
        private InputPropertyInfo _endTime;
        private InputPropertyInfo _eventPrices;
        private InputPropertyInfo _eventType;
        private InputPropertyInfo _instructorForEvents;
        private InputPropertyInfo _locations;
        private InputPropertyInfo _name;
        private InputPropertyInfo _startTime;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? ClubId
        {
            get => (QueryBuilderParameter<object?>?)_clubId.Value;
            set => _clubId = new InputPropertyInfo { Name = "clubId", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Description
        {
            get => (QueryBuilderParameter<string?>?)_description.Value;
            set => _description = new InputPropertyInfo { Name = "description", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? EndTime
        {
            get => (QueryBuilderParameter<object?>?)_endTime.Value;
            set => _endTime = new InputPropertyInfo { Name = "endTime", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<EventPriceRequestInput?>?>))]
        #endif
        public QueryBuilderParameter<ICollection<EventPriceRequestInput?>?>? EventPrices
        {
            get => (QueryBuilderParameter<ICollection<EventPriceRequestInput?>?>?)_eventPrices.Value;
            set => _eventPrices = new InputPropertyInfo { Name = "eventPrices", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<EventType?>))]
        #endif
        public QueryBuilderParameter<EventType?>? EventType
        {
            get => (QueryBuilderParameter<EventType?>?)_eventType.Value;
            set => _eventType = new InputPropertyInfo { Name = "eventType", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<object>?>))]
        #endif
        public QueryBuilderParameter<ICollection<object>?>? InstructorForEvents
        {
            get => (QueryBuilderParameter<ICollection<object>?>?)_instructorForEvents.Value;
            set => _instructorForEvents = new InputPropertyInfo { Name = "instructorForEvents", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<object>?>))]
        #endif
        public QueryBuilderParameter<ICollection<object>?>? Locations
        {
            get => (QueryBuilderParameter<ICollection<object>?>?)_locations.Value;
            set => _locations = new InputPropertyInfo { Name = "locations", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
        #endif
        public QueryBuilderParameter<string?>? Name
        {
            get => (QueryBuilderParameter<string?>?)_name.Value;
            set => _name = new InputPropertyInfo { Name = "name", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? StartTime
        {
            get => (QueryBuilderParameter<object?>?)_startTime.Value;
            set => _startTime = new InputPropertyInfo { Name = "startTime", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clubId.Name != null) yield return _clubId;
            if (_description.Name != null) yield return _description;
            if (_endTime.Name != null) yield return _endTime;
            if (_eventPrices.Name != null) yield return _eventPrices;
            if (_eventType.Name != null) yield return _eventType;
            if (_instructorForEvents.Name != null) yield return _instructorForEvents;
            if (_locations.Name != null) yield return _locations;
            if (_name.Name != null) yield return _name;
            if (_startTime.Name != null) yield return _startTime;
        }
    }

    public class EventPriceRequestInput : IGraphQlInputObject
    {
        private InputPropertyInfo _clubSubscriptionId;
        private InputPropertyInfo _price;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object?>))]
        #endif
        public QueryBuilderParameter<object?>? ClubSubscriptionId
        {
            get => (QueryBuilderParameter<object?>?)_clubSubscriptionId.Value;
            set => _clubSubscriptionId = new InputPropertyInfo { Name = "clubSubscriptionId", Value = value };
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?>? Price
        {
            get => (QueryBuilderParameter<decimal?>?)_price.Value;
            set => _price = new InputPropertyInfo { Name = "price", Value = value };
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_clubSubscriptionId.Name != null) yield return _clubSubscriptionId;
            if (_price.Name != null) yield return _price;
        }
    }
    #endregion

    #region data classes
    public class Query
    {
        public ICollection<RoomBooking?>? Bookings { get; set; }
        public ICollection<ClubmemberClubSubscription?>? ClubmemberapiClubSubscriptions { get; set; }
        public ICollection<ClubMember?>? ClubMembers { get; set; }
        public ICollection<Club?>? Clubs { get; set; }
        public ICollection<ClubSubscription?>? ClubSubscriptions { get; set; }
        public ICollection<EventParticipant?>? EventParticipants { get; set; }
        public ICollection<Club?>? MyClubs { get; set; }
        public ICollection<RoomClub?>? RoomapiClubs { get; set; }
        public ICollection<Room?>? Rooms { get; set; }
        public ICollection<SubscriptionClub?>? SubscriptionapiClubs { get; set; }
        public ICollection<ClubSubscription?>? SubscriptionsForClub { get; set; }
        public ICollection<Template1?>? Template1S { get; set; }
        public ICollection<IdentityApplicationUser?>? Users { get; set; }
    }

    public class Mutation
    {
        public Club? AddInstructor { get; set; }
        public Club? CreateClub { get; set; }
        public ClubMember? CreateClubMember { get; set; }
        public ClubSubscription? CreateClubSubscription { get; set; }
        public Event? CreateEvent { get; set; }
        public Room? CreateRoom { get; set; }
        public Template1? CreateTemplate1 { get; set; }
        public IdentityResponse? CreateUser { get; set; }
        public Club? DeleteClub { get; set; }
        public ClubMember? DeleteClubMember { get; set; }
        public Room? DeleteRoom { get; set; }
        public Template1? DeleteTemplate1 { get; set; }
        public IdentityApplicationUser? EditUser { get; set; }
        public IdentityResponse? LoginUser { get; set; }
        public Club? RemoveInstructor { get; set; }
        public object? SignUpFreeEvent { get; set; }
        public Club? UpdateClub { get; set; }
        public ClubMember? UpdateClubMember { get; set; }
        public ClubSubscription? UpdateClubSubscription { get; set; }
        public Event? UpdateEvent { get; set; }
        public Room? UpdateRoom { get; set; }
        public Template1? UpdateTemplate1 { get; set; }
    }

    public class Template1
    {
        public string? Name { get; set; }
        public object? Template1Id { get; set; }
        public ICollection<Template1ValidationResult?>? Validate { get; set; }
    }

    public class Template1ValidationResult
    {
        public string? ErrorMessage { get; set; }
        public ICollection<string?>? MemberNames { get; set; }
    }

    public class IdentityApplicationUser
    {
        public int? AccessFailedCount { get; set; }
        public object? BirthDate { get; set; }
        public string? ConcurrencyStamp { get; set; }
        public string? Email { get; set; }
        public bool? EmailConfirmed { get; set; }
        public string? Id { get; set; }
        public bool? LockoutEnabled { get; set; }
        public object? LockoutEnd { get; set; }
        public string? Name { get; set; }
        public string? NormalizedEmail { get; set; }
        public string? NormalizedUserName { get; set; }
        public string? PasswordHash { get; set; }
        public string? PhoneNumber { get; set; }
        public bool? PhoneNumberConfirmed { get; set; }
        public string? SecurityStamp { get; set; }
        public bool? TwoFactorEnabled { get; set; }
        public string? UserName { get; set; }
    }

    public class IdentityResponse
    {
        public string? Token { get; set; }
        public IdentityApplicationUser? User { get; set; }
    }

    public class Club
    {
        public string? AccountNumber { get; set; }
        public string? Address { get; set; }
        public object? AdminId { get; set; }
        public object? ClubId { get; set; }
        public string? Description { get; set; }
        public ICollection<object>? InstructorIds { get; set; }
        public string? Name { get; set; }
        public string? PhoneNumber { get; set; }
        public string? RegistrationNumber { get; set; }
        public ICollection<ClubValidationResult?>? Validate { get; set; }
    }

    public class ClubValidationResult
    {
        public string? ErrorMessage { get; set; }
        public ICollection<string?>? MemberNames { get; set; }
    }

    public class ClubSubscription
    {
        public SubscriptionClub? Club { get; set; }
        public object? ClubId { get; set; }
        public object? ClubSubscriptionId { get; set; }
        public string? Name { get; set; }
        public int? Price { get; set; }
    }

    public class SubscriptionClub
    {
        public object? ClubId { get; set; }
        public ICollection<ClubSubscription?>? Subscriptions { get; set; }
    }

    public class ClubMember
    {
        public object? ClubId { get; set; }
        public object? ClubSubscriptionId { get; set; }
        public object? UserId { get; set; }
        public ICollection<ClubmemberValidationResult?>? Validate { get; set; }
    }

    public class ClubmemberClubSubscription
    {
        public object? ClubId { get; set; }
        public ICollection<ClubMember?>? ClubMembers { get; set; }
        public object? ClubSubscriptionId { get; set; }
    }

    public class ClubmemberValidationResult
    {
        public string? ErrorMessage { get; set; }
        public ICollection<string?>? MemberNames { get; set; }
    }

    public class Room
    {
        public ICollection<RoomBooking?>? Bookings { get; set; }
        public object? ClubId { get; set; }
        public string? Name { get; set; }
        public object? RoomId { get; set; }
        public ICollection<RoomValidationResult?>? Validate { get; set; }
    }

    public class RoomBooking
    {
        public object? EndTime { get; set; }
        public object? EventId { get; set; }
        public string? Name { get; set; }
        public object? RoomId { get; set; }
        public object? StartTime { get; set; }
        public ICollection<RoomValidationResult?>? Validate { get; set; }
    }

    public class RoomClub
    {
        public object? ClubId { get; set; }
        public ICollection<Room?>? Rooms { get; set; }
        public ICollection<RoomValidationResult?>? Validate { get; set; }
    }

    public class RoomValidationResult
    {
        public string? ErrorMessage { get; set; }
        public ICollection<string?>? MemberNames { get; set; }
    }

    public class Event
    {
        public object? ClubId { get; set; }
        public string? Description { get; set; }
        public object? EndTime { get; set; }
        public object? EventId { get; set; }
        public ICollection<EventPrice?>? EventPrices { get; set; }
        public EventType? EventType { get; set; }
        public ICollection<InstructorForEvent?>? InstructorForEvents { get; set; }
        public ICollection<RoomEvent?>? Locations { get; set; }
        public string? Name { get; set; }
        public object? StartTime { get; set; }
        public EventStatus? Status { get; set; }
        public ICollection<EventValidationResult?>? Validate { get; set; }
    }

    public class EventValidationResult
    {
        public string? ErrorMessage { get; set; }
        public ICollection<string?>? MemberNames { get; set; }
    }

    public class EventPrice
    {
        public EventClubSubscription? ClubSubscription { get; set; }
        public object? ClubSubscriptionId { get; set; }
        public Event? Event { get; set; }
        public object? EventId { get; set; }
        public decimal? Price { get; set; }
        public ICollection<EventValidationResult?>? Validate { get; set; }
    }

    public class RoomEvent
    {
        public Event? Event { get; set; }
        public object? EventId { get; set; }
        public EventRoom? Room { get; set; }
        public object? RoomId { get; set; }
    }

    public class InstructorForEvent
    {
        public Event? Event { get; set; }
        public object? EventId { get; set; }
        public EventInstructor? Instructor { get; set; }
        public object? InstructorId { get; set; }
    }

    public class EventClubSubscription
    {
        public object? ClubId { get; set; }
        public object? ClubSubscriptionId { get; set; }
        public ICollection<EventPrice?>? EventPrices { get; set; }
    }

    public class EventRoom
    {
        public object? ClubId { get; set; }
        public ICollection<RoomEvent?>? Locations { get; set; }
        public object? RoomId { get; set; }
    }

    public class EventInstructor
    {
        public object? ClubId { get; set; }
        public ICollection<InstructorForEvent?>? InstructorForEvents { get; set; }
        public object? InstructorId { get; set; }
    }

    public class EventParticipant
    {
        public EventparticipantEvent? Event { get; set; }
        public object? EventId { get; set; }
        public object? EventParticipantId { get; set; }
        public object? UserId { get; set; }
    }

    public class EventparticipantEvent
    {
        public object? ClubId { get; set; }
        public object? EventId { get; set; }
        public ICollection<EventParticipant?>? EventParticipants { get; set; }
        public ICollection<EventparticipantEventPrice?>? EventPrices { get; set; }
        public EventType? EventType { get; set; }
        public bool? IsFree { get; set; }
    }

    public class EventparticipantEventPrice
    {
        public object? ClubSubscriptionId { get; set; }
        public EventparticipantEvent? Event { get; set; }
        public object? EventId { get; set; }
        public decimal? Price { get; set; }
    }
    #endregion
#nullable restore
}
